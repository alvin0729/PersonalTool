{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red255\green0\blue255;\red170\green13\blue145;\red255\green255\blue255;
\red0\green0\blue0;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c0\c100000;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c0\c0\c0;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18940\viewh13720\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
\
1.1 \'bd\'e2\'d1\'b9\'d0\'f2\'c1\'d0\'b8\'b3\'d6\'b5\'b8\'f8\'b6\'e0\'b8\'f6\'b1\'e4\'c1\'bf\
\
\'bd\'e2\'d1\'b9\'b8\'b3\'d6\'b5\'bf\'c9\'d2\'d4\'d3\'c3\'d4\'da\'c8\'ce\'ba\'ce\'bf\'c9\'b5\'fc\'b4\'fa\'b6\'d4\'cf\'f3\'c9\'cf\'c3\'e6\'a3\'ac\'b6\'f8\'b2\'bb\'bd\'f6\'bd\'f6\'ca\'c7\'c1\'d0\'b1\'ed\'bb\'f2\'d5\'df\'d4\'aa\'d7\'e9\'a1\'a3\
\'b0\'fc\'c0\'a8\'d7\'d6\'b7\'fb\'b4\'ae\'a3\'ac\'ce\'c4\'bc\'fe\'b6\'d4\'cf\'f3\'a3\'ac\'b5\'fc\'b4\'fa\'c6\'f7\'ba\'cd\'c9\'fa\'b3\'c9\'c6\'f7\'a1\'a3\
\
>>> s = 'Hello'\
>>> a, b, c, d, e = s\
\
>>> data = [ 'ACME', 50, 91.1, (2012, 12, 21) ]\
>>> _, shares, price, _ = data\
\
\
1.2 \'bd\'e2\'d1\'b9\'bf\'c9\'b5\'fc\'b4\'fa\'b6\'d4\'cf\'f3\'b8\'b3\'d6\'b5\'b8\'f8\'b6\'e0\'b8\'f6\'b1\'e4\'c1\'bf\
\
\'cf\'eb\'cd\'b3\'bc\'c6\'cf\'c2\'bc\'d2\'cd\'a5\'d7\'f7\'d2\'b5\'b5\'c4\'c6\'bd\'be\'f9\'b3\'c9\'bc\'a8\'a3\'ac\'b5\'ab\'ca\'c7\'c5\'c5\'b3\'fd\'b5\'f4\'b5\'da\'d2\'bb\'b8\'f6\'ba\'cd\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'b7\'d6\'ca\'fd\'a1\'a3\
def drop_first_last(grades):\
	first, *middle, last = grades\
	return avg(middle)\
\
>>> record = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212')\
>>> name, email, *phone_numbers = record\
>>> name\
'Dave'\
>>> email\
'dave@example.com'\
>>> phone_numbers\
['773-555-1212', '847-555-1212']\
\'c9\'cf\'c3\'e6\'bd\'e2\'d1\'b9\'b3\'f6\'b5\'c4 phone_numbers \'b1\'e4\'c1\'bf\'d3\'c0\'d4\'b6\'b6\'bc\'ca\'c7\'c1\'d0\'b1\'ed\'c0\'e0\'d0\'cd\'a3\'ac\'b2\'bb\'b9\'dc\'bd\'e2\'d1\'b9\'b5\'c4\'b5\'e7\'bb\'b0\'ba\'c5\'c2\'eb\'ca\'fd\'c1\'bf\'ca\'c7\'b6\'e0\'c9\'d9\'a3\'a8\'b0\'fc\'c0\'a8 0 \'b8\'f6\'a3\'a9\'a1\'a3\
\
>>> *trailing, current = [10, 8, 7, 1, 9, 5, 10, 3]\
>>> trailing\
[10, 8, 7, 1, 9, 5, 10]\
>>> current\
3\
\
\'d0\'c7\'ba\'c5\'b1\'ed\'b4\'ef\'ca\'bd\'d4\'da\'b5\'fc\'b4\'fa\'d4\'aa\'cb\'d8\'ce\'aa\'bf\'c9\'b1\'e4\'b3\'a4\'d4\'aa\'d7\'e9\'b5\'c4\'d0\'f2\'c1\'d0\'ca\'b1\'ca\'c7\'ba\'dc\'d3\'d0\'d3\'c3\'b5\'c4\
records = [\
	('foo', 1, 2),\
	('bar', 'hello'),\
	('foo', 3, 4),\
]\
def do_foo(x, y):\
	print('foo', x, y)\
def do_bar(s):\
	print('bar', s)\
for tag, *args in records:\
	if tag == 'foo':\
		do_foo(*args)\
	elif tag == 'bar':\
		do_bar(*args)\
\'d0\'c7\'ba\'c5\'bd\'e2\'d1\'b9\'d3\'ef\'b7\'a8\'d4\'da\'d7\'d6\'b7\'fb\'b4\'ae\'b2\'d9\'d7\'f7\'b5\'c4\'ca\'b1\'ba\'f2\'d2\'b2\'bb\'e1\'ba\'dc\'d3\'d0\'d3\'c3\'a3\'ac\'b1\'c8\'c8\'e7\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'b7\'d6\'b8\'ee\'a1\'a3\
>>> line = 'nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false'\
>>> uname, *fields, homedir, sh = line.split(':')\
\
\'bd\'e2\'d1\'b9\'d2\'bb\'d0\'a9\'d4\'aa\'cb\'d8\'ba\'f3\'b6\'aa\'c6\'fa\'cb\'fc\'c3\'c7\'a3\'ac\'c4\'e3\'b2\'bb\'c4\'dc\'bc\'f2\'b5\'a5\'be\'cd\'ca\'b9\'d3\'c3 * \'a3\'ac\'b5\'ab\'ca\'c7\'c4\'e3\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'d2\'bb\
\'b8\'f6\'c6\'d5\'cd\'a8\'b5\'c4\'b7\'cf\'c6\'fa\'c3\'fb\'b3\'c6\'a3\'ac\'b1\'c8\'c8\'e7 _ \'bb\'f2\'d5\'df ign \'a3\'a8ignore\'a3\'a9\'a1\'a3\
>>> record = ('ACME', 50, 123.45, (12, 18, 2012))\
>>> name, *_, (*_, year) = record\
\
\'bd\'ab\'c1\'d0\'b1\'ed\'b7\'d6\'b8\'ee\'b3\'c9\'c7\'b0\'ba\'f3\'c1\'bd\'b2\'bf\'b7\'d6\'a3\'ba\
>>> items = [1, 10, 7, 4, 5, 9]\
>>> head, *tail = items\
>>> head\
1\
>>> tail\
[10, 7, 4, 5, 9]\
\
\'d3\'c3\'d5\'e2\'d6\'d6\'b7\'d6\'b8\'ee\'d3\'ef\'b7\'a8\'c8\'a5\'c7\'c9\'c3\'ee\'b5\'c4\'ca\'b5\'cf\'d6\'b5\'dd\'b9\'e9\'cb\'e3\'b7\'a8\
>>> def sum(items):\
... head, *tail = items\
... return head + sum(tail) if tail else head\
...\
>>> sum(items)\
36\
\
1.3 \'b1\'a3\'c1\'f4\'d7\'ee\'ba\'f3 N \'b8\'f6\'d4\'aa\'cb\'d8\
from collections import deque\
def search(lines, pattern, history=5):\
    previous_lines = deque(maxlen=history)\
    for li in lines:\
        if pattern in li:\
            yield li, previous_lines\
        previous_lines.append(li)\
\
# Example use on a file\
if __name__ == '__main__':\
    with open(r'../../cookbook/somefile.txt') as f:\
        for line, prevlines in search(f, 'Python', 5):\
            for pline in prevlines:\
                print(pline, end='')\
            print(line, end='')\
            print('-' * 20)\
\
1.4 \'b2\'e9\'d5\'d2\'d7\'ee\'b4\'f3\'bb\'f2\'d7\'ee\'d0\'a1\'b5\'c4 N \'b8\'f6\'d4\'aa\'cb\'d8\
import heapq\
nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\
print(heapq.nlargest(3, nums)) # Prints [42, 37, 23]\
print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]\
\
\'c1\'bd\'b8\'f6\'ba\'af\'ca\'fd\'b6\'bc\'c4\'dc\'bd\'d3\'ca\'dc\'d2\'bb\'b8\'f6\'b9\'d8\'bc\'fc\'d7\'d6\'b2\'ce\'ca\'fd\
portfolio = [\
\{'name': 'IBM', 'shares': 100, 'price': 91.1\},\
\{'name': 'AAPL', 'shares': 50, 'price': 543.22\},\
\{'name': 'FB', 'shares': 200, 'price': 21.09\},\
\{'name': 'HPQ', 'shares': 35, 'price': 31.75\},\
\{'name': 'YHOO', 'shares': 45, 'price': 16.35\},\
\{'name': 'ACME', 'shares': 75, 'price': 115.65\}\
]\
cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\
expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\
\
\
>>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\
>>> import heapq\
>>> heap = list(nums)\
>>> heapq.heapify(heap)\
>>> heap\
[-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]\
>>>\
\'b6\'d1\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9\'d7\'ee\'d6\'d8\'d2\'aa\'b5\'c4\'cc\'d8\'d5\'f7\'ca\'c7 heap[0] \'d3\'c0\'d4\'b6\'ca\'c7\'d7\'ee\'d0\'a1\'b5\'c4\'d4\'aa\'cb\'d8\'a1\'a3\'b2\'a2\'c7\'d2\'ca\'a3\'d3\'e0\'b5\'c4\'d4\'aa\'cb\'d8\'bf\'c9\'d2\'d4\'ba\'dc\
\'c8\'dd\'d2\'d7\'b5\'c4\'cd\'a8\'b9\'fd\'b5\'f7\'d3\'c3 heapq.heappop() \'b7\'bd\'b7\'a8\'b5\'c3\'b5\'bd\'a3\'ac\'b8\'c3\'b7\'bd\'b7\'a8\'bb\'e1\'cf\'c8\'bd\'ab\'b5\'da\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'b5\'af\'b3\'f6\'c0\'b4\'a3\'ac\'c8\'bb\'ba\'f3\
\'d3\'c3\'cf\'c2\'d2\'bb\'b8\'f6\'d7\'ee\'d0\'a1\'b5\'c4\'d4\'aa\'cb\'d8\'c0\'b4\'c8\'a1\'b4\'fa\'b1\'bb\'b5\'af\'b3\'f6\'d4\'aa\'cb\'d8\'a3\'a8\'d5\'e2\'d6\'d6\'b2\'d9\'d7\'f7\'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'bd\'f6\'bd\'f6\'ca\'c7 O(log N)\'a3\'ac N \'ca\'c7\
\'b6\'d1\'b4\'f3\'d0\'a1\'a3\'a9\'a1\'a3\'b1\'c8\'c8\'e7\'a3\'ac\'c8\'e7\'b9\'fb\'cf\'eb\'d2\'aa\'b2\'e9\'d5\'d2\'d7\'ee\'d0\'a1\'b5\'c4 3 \'b8\'f6\'d4\'aa\'cb\'d8\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'d5\'e2\'d1\'f9\'d7\'f6\'a3\'ba\
>>> heapq.heappop(heap)\
-4\
>>> heapq.heappop(heap)\
1\
>>> heapq.heappop(heap)\
2\
\
\'b5\'b1\'d2\'aa\'b2\'e9\'d5\'d2\'b5\'c4\'d4\'aa\'cb\'d8\'b8\'f6\'ca\'fd\'cf\'e0\'b6\'d4\'b1\'c8\'bd\'cf\'d0\'a1\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'ba\'af\'ca\'fd nlargest() \'ba\'cd nsmallest() \'ca\'c7\'ba\'dc\
\'ba\'cf\'ca\'ca\'b5\'c4\'a1\'a3\'c8\'e7\'b9\'fb\'c4\'e3\'bd\'f6\'bd\'f6\'cf\'eb\'b2\'e9\'d5\'d2\'ce\'a8\'d2\'bb\'b5\'c4\'d7\'ee\'d0\'a1\'bb\'f2\'d7\'ee\'b4\'f3\'a3\'a8N=1\'a3\'a9\'b5\'c4\'d4\'aa\'cb\'d8\'b5\'c4\'bb\'b0\'a3\'ac\'c4\'c7\'c3\'b4\'ca\'b9\'d3\'c3 min() \'ba\'cd\
max() \'ba\'af\'ca\'fd\'bb\'e1\'b8\'fc\'bf\'ec\'d0\'a9\'a1\'a3\'c0\'e0\'cb\'c6\'b5\'c4\'a3\'ac\'c8\'e7\'b9\'fb N \'b5\'c4\'b4\'f3\'d0\'a1\'ba\'cd\'bc\'af\'ba\'cf\'b4\'f3\'d0\'a1\'bd\'d3\'bd\'fc\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'cd\'a8\'b3\'a3\'cf\'c8\'c5\'c5\'d0\'f2\'d5\'e2\'b8\'f6\
\'bc\'af\'ba\'cf\'c8\'bb\'ba\'f3\'d4\'d9\'ca\'b9\'d3\'c3\'c7\'d0\'c6\'ac\'b2\'d9\'d7\'f7\'bb\'e1\'b8\'fc\'bf\'ec\'b5\'e3\'a3\'a8sorted(items)[:N] \'bb\'f2\'d5\'df\'ca\'c7 sorted(items)[-N:]\
\'a3\'a9\'a1\'a3\'d0\'e8\'d2\'aa\'d4\'da\'d5\'fd\'c8\'b7\'b3\'a1\'ba\'cf\'ca\'b9\'d3\'c3\'ba\'af\'ca\'fd nlargest() \'ba\'cd nsmallest() \'b2\'c5\'c4\'dc\'b7\'a2\'bb\'d3\'cb\'fc\'c3\'c7\'b5\'c4\'d3\'c5\'ca\'c6\'a3\'a8\'c8\'e7\'b9\'fb\
N \'bf\'ec\'bd\'d3\'bd\'fc\'bc\'af\'ba\'cf\'b4\'f3\'d0\'a1\'c1\'cb\'a3\'ac\'c4\'c7\'c3\'b4\'ca\'b9\'d3\'c3\'c5\'c5\'d0\'f2\'b2\'d9\'d7\'f7\'bb\'e1\'b8\'fc\'ba\'c3\'d0\'a9\'a3\'a9\'a1\'a3\
\
\
1.5 \'ca\'b5\'cf\'d6\'d2\'bb\'b8\'f6\'d3\'c5\'cf\'c8\'bc\'b6\'b6\'d3\'c1\'d0\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f1\fs28 \cf3 \cb4 import\cf5  heapq
\f2\fs24 \cf0 \
\

\f1\fs28 \cf3 class\cf5  PriorityQueue:
\f2\fs24 \cf0 \

\f1\fs28 \cf5     \cf3 def\cf5  __init__(self):
\f2\fs24 \cf0 \

\f1\fs28 \cf5         self._queue = []
\f2\fs24 \cf0 \

\f1\fs28 \cf5         self._index = \cf6 0
\f2\fs24 \cf0 \
\

\f1\fs28 \cf5     \cf3 def\cf5  push(self, item, priority):
\f2\fs24 \cf0 \

\f1\fs28 \cf5         heapq.heappush(self._queue, (-priority, self._index, item))
\f2\fs24 \cf0 \

\f1\fs28 \cf5         self._index += \cf6 1
\f2\fs24 \cf0 \
\

\f1\fs28 \cf5     \cf3 def\cf5  pop(self):
\f2\fs24 \cf0 \

\f1\fs28 \cf5         \cf3 return\cf5  heapq.heappop(self._queue)[\cf6 -1\cf5 ]
\f0\fs36 \cf2 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 >>> class Item:\
... def __init__(self, name):\
... self.name = name\
... def __repr__(self):\
... return 'Item(\{!r\})'.format(self.name)\
...\
>>> q = PriorityQueue()\
>>> q.push(Item('foo'), 1)\
>>> q.push(Item('bar'), 5)\
>>> q.push(Item('spam'), 4)\
>>> q.push(Item('grok'), 1)\
>>> q.pop()\
Item('bar')\
>>> q.pop()\
Item('spam')\
>>> q.pop()\
Item('foo')\
>>> q.pop()\
Item('grok')\
>>>\
\
\'d3\'da push \'ba\'cd pop\'b2\'d9\'d7\'f7\'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'ce\'aa O(log N)\
\
\'b6\'d3\'c1\'d0\'b0\'fc\'ba\'ac\'c1\'cb\'d2\'bb\'b8\'f6 (-priority, index, item) \'b5\'c4\'d4\'aa\'d7\'e9\'a1\'a3\'d3\'c5\'cf\'c8\'bc\'b6\'ce\'aa\'b8\'ba\
\'ca\'fd\'b5\'c4\'c4\'bf\'b5\'c4\'ca\'c7\'ca\'b9\'b5\'c3\'d4\'aa\'cb\'d8\'b0\'b4\'d5\'d5\'d3\'c5\'cf\'c8\'bc\'b6\'b4\'d3\'b8\'df\'b5\'bd\'b5\'cd\'c5\'c5\'d0\'f2\'a1\'a3\'d5\'e2\'b8\'f6\'b8\'fa\'c6\'d5\'cd\'a8\'b5\'c4\'b0\'b4\'d3\'c5\'cf\'c8\'bc\'b6\'b4\'d3\'b5\'cd\'b5\'bd\'b8\'df\'c5\'c5\'d0\'f2\
\'b5\'c4\'b6\'d1\'c5\'c5\'d0\'f2\'c7\'a1\'c7\'c9\'cf\'e0\'b7\'b4\'a1\'a3\
\
index \'b1\'e4\'c1\'bf\'b5\'c4\'d7\'f7\'d3\'c3\'ca\'c7\'b1\'a3\'d6\'a4\'cd\'ac\'b5\'c8\'d3\'c5\'cf\'c8\'bc\'b6\'d4\'aa\'cb\'d8\'b5\'c4\'d5\'fd\'c8\'b7\'c5\'c5\'d0\'f2\'a1\'a3\'cd\'a8\'b9\'fd\'b1\'a3\'b4\'e6\'d2\'bb\'b8\'f6\'b2\'bb\'b6\'cf\'d4\'f6\'bc\'d3\'b5\'c4\
index \'cf\'c2\'b1\'ea\'b1\'e4\'c1\'bf\'a3\'ac\'bf\'c9\'d2\'d4\'c8\'b7\'b1\'a3\'d4\'aa\'cb\'d8\'b0\'b4\'d5\'d5\'cb\'fc\'c3\'c7\'b2\'e5\'c8\'eb\'b5\'c4\'cb\'b3\'d0\'f2\'c5\'c5\'d0\'f2\'a1\'a3\
\
\'c8\'e7\'b9\'fb\'c4\'e3\'ca\'b9\'d3\'c3\'d4\'aa\'d7\'e9 (priority, item) \'a3\'ac\'d6\'bb\'d2\'aa\'c1\'bd\'b8\'f6\'d4\'aa\'cb\'d8\'b5\'c4\'d3\'c5\'cf\'c8\'bc\'b6\'b2\'bb\'cd\'ac\'be\'cd\'c4\'dc\'b1\'c8\'bd\'cf\'a1\'a3\'b5\'ab\'ca\'c7\
\'c8\'e7\'b9\'fb\'c1\'bd\'b8\'f6\'d4\'aa\'cb\'d8\'d3\'c5\'cf\'c8\'bc\'b6\'d2\'bb\'d1\'f9\'b5\'c4\'bb\'b0\'a3\'ac\'c4\'c7\'c3\'b4\'b1\'c8\'bd\'cf\'b2\'d9\'d7\'f7\'be\'cd\'bb\'e1\'b8\'fa\'d6\'ae\'c7\'b0\'d2\'bb\'d1\'f9\'b3\'f6\'b4\'ed\'a3\'ba\
>>> a = (1, Item('foo'))\
>>> b = (5, Item('bar'))\
>>> a < b\
True\
>>> c = (1, Item('grok'))\
>>> a < c\
Traceback (most recent call last):\
File "<stdin>", line 1, in <module>\
TypeError: unorderable types: Item() < Item()\
>>>\
\
\'cd\'a8\'b9\'fd\'d2\'fd\'c8\'eb\'c1\'ed\'cd\'e2\'b5\'c4 index \'b1\'e4\'c1\'bf\'d7\'e9\'b3\'c9\'c8\'fd\'d4\'aa\'d7\'e9 (priority, index, item) \'a3\'ac\'be\'cd\'c4\'dc\'ba\'dc\'ba\'c3\'b5\'c4\
\'b1\'dc\'c3\'e2\'c9\'cf\'c3\'e6\'b5\'c4\'b4\'ed\'ce\'f3\'a3\'ac\'d2\'f2\'ce\'aa\'b2\'bb\'bf\'c9\'c4\'dc\'d3\'d0\'c1\'bd\'b8\'f6\'d4\'aa\'cb\'d8\'d3\'d0\'cf\'e0\'cd\'ac\'b5\'c4 index \'d6\'b5\'a1\'a3 Python \'d4\'da\'d7\'f6\'d4\'aa\'d7\'e9\'b1\'c8\'bd\'cf\'ca\'b1\
\'ba\'f2\'a3\'ac\'c8\'e7\'b9\'fb\'c7\'b0\'c3\'e6\'b5\'c4\'b1\'c8\'bd\'cf\'d2\'d1\'be\'ad\'bf\'c9\'d2\'d4\'c8\'b7\'b6\'a8\'bd\'e1\'b9\'fb\'c1\'cb\'a3\'ac\'ba\'f3\'c3\'e6\'b5\'c4\'b1\'c8\'bd\'cf\'b2\'d9\'d7\'f7\'be\'cd\'b2\'bb\'bb\'e1\'b7\'a2\'c9\'fa\'c1\'cb\'a3\'ba\
>>> a = (1, 0, Item('foo'))\
>>> b = (5, 1, Item('bar'))\
>>> c = (1, 2, Item('grok'))\
>>> a < b\
True\
>>> a < c\
True\
>>>\
\
1.6 \'d7\'d6\'b5\'e4\'d6\'d0\'b5\'c4\'bc\'fc\'d3\'b3\'c9\'e4\'b6\'e0\'b8\'f6\'d6\'b5\
d = \{\
	'a' : [1, 2, 3],\
	'b' : [4, 5]\
\}\
e= \{\
	'a' : \{1, 2, 3\},\
	'b' : \{4, 5\}\
\}\
\
from collections import defaultdict\
d = defaultdict(list)\
d['a'].append(1)\
d['a'].append(2)\
d['b'].append(4)\
d = defaultdict(set)\
d['a'].add(1)\
d['a'].add(2)\
d['b'].add(4)\
\
\
1.7 \'d7\'d6\'b5\'e4\'c5\'c5\'d0\'f2\
from collections import OrderedDict\
d = OrderedDict()\
d['foo'] = 1\
d['bar'] = 2\
d['spam'] = 3\
d['grok'] = 4\
# Outputs "foo 1", "bar 2", "spam 3", "grok 4"\
for key in d:\
	print(key, d[key])\
\
\'c4\'e3\'cf\'eb\'be\'ab\'c8\'b7\'bf\'d8\'d6\'c6\'d2\'d4 JSON \'b1\'e0\'c2\'eb\'ba\'f3\'d7\'d6\'b6\'ce\'b5\'c4\'cb\'b3\'d0\'f2\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'cf\'c8\'ca\'b9\'d3\'c3\
OrderedDict \'c0\'b4\'b9\'b9\'bd\'a8\'d5\'e2\'d1\'f9\'b5\'c4\'ca\'fd\'be\'dd\'a3\'ba\
>>> import json\
>>> json.dumps(d)\
'\{"foo": 1, "bar": 2, "spam": 3, "grok": 4\}'\
>>>\
\
\'d0\'e8\'d2\'aa\'d7\'a2\'d2\'e2\'b5\'c4\'ca\'c7\'a3\'ac\'d2\'bb\'b8\'f6 OrderedDict \'b5\'c4\'b4\'f3\'d0\'a1\'ca\'c7\'d2\'bb\'b8\'f6\'c6\'d5\'cd\'a8\'d7\'d6\'b5\'e4\'b5\'c4\'c1\'bd\'b1\'b6\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fc\'c4\'da\'b2\'bf\'ce\'ac\'bb\'a4\'d7\'c5\'c1\'ed\'cd\'e2\'d2\'bb\'b8\'f6\'c1\'b4\'b1\'ed\'a1\'a3\
\
1.8 \'d7\'d6\'b5\'e4\'b5\'c4\'d4\'cb\'cb\'e3\
prices = \{\
'ACME': 45.23,\
'AAPL': 612.78,\
'IBM': 205.55,\
'HPQ': 37.20,\
'FB': 10.75\
\}\
\
\'ce\'aa\'c1\'cb\'b6\'d4\'d7\'d6\'b5\'e4\'d6\'b5\'d6\'b4\'d0\'d0\'bc\'c6\'cb\'e3\'b2\'d9\'d7\'f7\'a3\'ac\'cd\'a8\'b3\'a3\'d0\'e8\'d2\'aa\'ca\'b9\'d3\'c3 zip() \'ba\'af\'ca\'fd\'cf\'c8\'bd\'ab\'bc\'fc\'ba\'cd\'d6\'b5\'b7\'b4\'d7\'aa\'b9\'fd\'c0\'b4\'a1\'a3\'b1\'c8\'c8\'e7\'a3\'ac\'cf\'c2\'c3\'e6\'ca\'c7\'b2\'e9\'d5\'d2\'d7\'ee\'d0\'a1\'ba\'cd\'d7\'ee\'b4\'f3\'b9\'c9\'c6\'b1\'bc\'db\'b8\'f1\'ba\'cd\'b9\'c9\'c6\'b1\'d6\'b5\'b5\'c4\'b4\'fa\'c2\'eb\'a3\'ba\
min_price = min(zip(prices.values(), prices.keys()))\
# min_price is (10.75, 'FB')\
max_price = max(zip(prices.values(), prices.keys()))\
# max_price is (612.78, 'AAPL')\
\
prices_sorted = sorted(zip(prices.values(), prices.keys()))\
\
\'d7\'a2\'d2\'e2\'b5\'c4\'ca\'c7 zip() \'ba\'af\'ca\'fd\'b4\'b4\'bd\'a8\'b5\'c4\'ca\'c7\'d2\'bb\'b8\'f6\'d6\'bb\'c4\'dc\'b7\'c3\'ce\'ca\'d2\'bb\'b4\'ce\'b5\'c4\'b5\'fc\'b4\'fa\'c6\'f7\'a1\'a3\
prices_and_names = zip(prices.values(), prices.keys())\
print(min(prices_and_names)) # OK\
print(max(prices_and_names)) # ValueError: max() arg is an empty sequence\
\
\'cc\'d6\'c2\'db\
min(prices) # Returns 'AAPL'\
max(prices) # Returns 'IBM'\
\
\'d4\'da min() \'ba\'cd max() \'ba\'af\'ca\'fd\'d6\'d0\'cc\'e1\'b9\'a9 key \'ba\'af\'ca\'fd\'b2\'ce\'ca\'fd\'c0\'b4\'bb\'f1\'c8\'a1\'d7\'ee\'d0\'a1\'d6\'b5\'bb\'f2\'d7\'ee\'b4\'f3\'d6\'b5\'b6\'d4\'d3\'a6\'b5\'c4\'bc\'fc\'b5\'c4\'d0\'c5\'cf\'a2\'a1\'a3\
min(prices, key=lambda k: prices[k]) # Returns 'FB'\
max(prices, key=lambda k: prices[k]) # Returns 'AAPL'\
\
min_value = prices[min(prices, key=lambda k: prices[k])]\
\
\'b5\'b1\'b6\'e0\'b8\'f6\'ca\'b5\'cc\'e5\'d3\'b5\'d3\'d0\'cf\'e0\'cd\'ac\'b5\'c4\'d6\'b5\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'bc\'fc\'bb\'e1\'be\'f6\'b6\'a8\'b7\'b5\'bb\'d8\'bd\'e1\'b9\'fb\'a1\'a3\
>>> prices = \{ 'AAA' : 45.23, 'ZZZ': 45.23 \}\
>>> min(zip(prices.values(), prices.keys()))\
(45.23, 'AAA')\
>>> max(zip(prices.values(), prices.keys()))\
(45.23, 'ZZZ')\
\
\
1.9 \'b2\'e9\'d5\'d2\'c1\'bd\'d7\'d6\'b5\'e4\'b5\'c4\'cf\'e0\'cd\'ac\'b5\'e3\
a = \{\
'x' : 1,\
'y' : 2,\
'z' : 3\
\} b\
= \{\
'w' : 10,\
'x' : 11,\
'y' : 2\
\}\
\
# Find keys in common\
a.keys() & b.keys() # \{ 'x', 'y' \}\
# Find keys in a that are not in b\
a.keys() - b.keys() # \{ 'z' \}\
# Find (key,value) pairs in common\
a.items() & b.items() # \{ ('y', 2) \}\
\
\'c0\'fb\'d3\'c3\'d7\'d6\'b5\'e4\'cd\'c6\'b5\'bc\'c0\'b4\'ca\'b5\'cf\'d6: \'d2\'d4\'cf\'d6\'d3\'d0\'d7\'d6\'b5\'e4\'b9\'b9\'d4\'ec\'d2\'bb\'b8\'f6\'c5\'c5\'b3\'fd\'bc\'b8\'b8\'f6\'d6\'b8\'b6\'a8\'bc\'fc\'b5\'c4\'d0\'c2\'d7\'d6\'b5\'e4\'a1\'a3\
# Make a new dictionary with certain keys removed\
c = \{key:a[key] for key in a.keys() - \{'z', 'w'\}\}\
# c is \{'x': 1, 'y': 2\}\
\
1.10 \'c9\'be\'b3\'fd\'d0\'f2\'c1\'d0\'cf\'e0\'cd\'ac\'d4\'aa\'cb\'d8\'b2\'a2\'b1\'a3\'b3\'d6\'cb\'b3\'d0\'f2\
\'c8\'e7\'b9\'fb\'d0\'f2\'c1\'d0\'c9\'cf\'b5\'c4\'d6\'b5\'b6\'bc\'ca\'c7 hashable \'c0\'e0\'d0\'cd\'a3\'ac\'c4\'c7\'c3\'b4\'bf\'c9\'d2\'d4\'ba\'dc\'bc\'f2\'b5\'a5\'b5\'c4\'c0\'fb\'d3\'c3\'bc\'af\'ba\'cf\'bb\'f2\'d5\'df\'c9\'fa\'b3\'c9\'c6\'f7\'c0\'b4\'bd\'e2\
\'be\'f6\'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'a1\'a3\'b1\'c8\'c8\'e7\'a3\'ba\
def dedupe(items):\
	seen = set()\
	for item in items:\
		if item not in seen:\
			yield item\
			seen.add(item)\
>>> a = [1, 5, 2, 1, 9, 1, 5, 10]\
>>> list(dedupe(a))\
\
\'cf\'fb\'b3\'fd\'d4\'aa\'cb\'d8\'b2\'bb\'bf\'c9\'b9\'fe\'cf\'a3\'a3\'a8\'b1\'c8\'c8\'e7 dict \'c0\'e0\'d0\'cd\'a3\'a9\'b5\'c4\'d0\'f2\'c1\'d0\'d6\'d0\'d6\'d8\'b8\'b4\'d4\'aa\'cb\'d8\'a3\'a8\'bb\'f9\'d3\'da\'b5\'a5\'b8\'f6\'d7\'d6\'b6\'ce\'a1\'a2\'ca\'f4\'d0\'d4\'bb\'f2\'d5\'df\'c4\'b3\'b8\'f6\'b8\'fc\'b4\'f3\'b5\'c4\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9\'c0\'b4\'cf\'fb\'b3\'fd\'d6\'d8\'b8\'b4\'d4\'aa\'cb\'d8\'a3\'a9\
def dedupe(items, key=None):\
	seen = set()\
	for item in items:\
		val = item if key is None else key(item)\
		if val not in seen:\
			yield item\
			seen.add(val)\
\'d5\'e2\'c0\'ef\'b5\'c4 key \'b2\'ce\'ca\'fd\'d6\'b8\'b6\'a8\'c1\'cb\'d2\'bb\'b8\'f6\'ba\'af\'ca\'fd\'a3\'ac\'bd\'ab\'d0\'f2\'c1\'d0\'d4\'aa\'cb\'d8\'d7\'aa\'bb\'bb\'b3\'c9 hashable \'c0\'e0\'d0\'cd\'a1\'a3\
>>> a = [ \{'x':1, 'y':2\}, \{'x':1, 'y':3\}, \{'x':1, 'y':2\}, \{'x':2, 'y':4\}]\
>>> list(dedupe(a, key=lambda d: (d['x'],d['y'])))\
[\{'x': 1, 'y': 2\}, \{'x': 1, 'y': 3\}, \{'x': 2, 'y': 4\}]\
>>> list(dedupe(a, key=lambda d: d['x']))\
[\{'x': 1, 'y': 2\}, \{'x': 2, 'y': 4\}]\
>>>\
\
\'bd\'f6\'bd\'f6\'be\'cd\'ca\'c7\'cf\'eb\'cf\'fb\'b3\'fd\'d6\'d8\'b8\'b4\'d4\'aa\'cb\'d8\
>>> a\
[1, 5, 2, 1, 9, 1, 5, 10]\
>>> set(a)\
\{1, 2, 10, 5, 9\}\
\'d5\'e2\'d6\'d6\'b7\'bd\'b7\'a8\'b2\'bb\'c4\'dc\'ce\'ac\'bb\'a4\'d4\'aa\'cb\'d8\'b5\'c4\'cb\'b3\'d0\'f2\'a3\'ac\'c9\'fa\'b3\'c9\'b5\'c4\'bd\'e1\'b9\'fb\'d6\'d0\'b5\'c4\'d4\'aa\'cb\'d8\'ce\'bb\'d6\'c3\'b1\'bb\'b4\'f2\'c2\'d2\'a1\'a3\'b6\'f8\'c9\'cf\'c3\'e6\'b5\'c4\'b7\'bd\'b7\'a8\'bf\'c9\'d2\'d4\'b1\'dc\'c3\'e2\'d5\'e2\'d6\'d6\'c7\'e9\'bf\'f6\'a1\'a3\
\
\'d4\'da\'b1\'be\'bd\'da\'d6\'d0\'ce\'d2\'c3\'c7\'ca\'b9\'d3\'c3\'c1\'cb\'c9\'fa\'b3\'c9\'c6\'f7\'ba\'af\'ca\'fd\'c8\'c3\'ce\'d2\'c3\'c7\'b5\'c4\'ba\'af\'ca\'fd\'b8\'fc\'bc\'d3\'cd\'a8\'d3\'c3\'a3\'ac\'b2\'bb\'bd\'f6\'bd\'f6\'ca\'c7\'be\'d6\'cf\'de\'d3\'da\'c1\'d0\'b1\'ed\'b4\'a6\
\'c0\'ed\'a1\'a3\'b1\'c8\'c8\'e7\'a3\'ac\'c8\'e7\'b9\'fb\'c8\'e7\'b9\'fb\'c4\'e3\'cf\'eb\'b6\'c1\'c8\'a1\'d2\'bb\'b8\'f6\'ce\'c4\'bc\'fe\'a3\'ac\'cf\'fb\'b3\'fd\'d6\'d8\'b8\'b4\'d0\'d0\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'ba\'dc\'c8\'dd\'d2\'d7\'cf\'f1\'d5\'e2\'d1\'f9\'d7\'f6\'a3\'ba\
with open(somefile,'r') as f:\
for line in dedupe(f):\
	...\
\
1.11 \'c3\'fc\'c3\'fb\'c7\'d0\'c6\'ac\
\'c4\'da\'d6\'c3\'b5\'c4 slice() \'ba\'af\'ca\'fd\'b4\'b4\'bd\'a8\'c1\'cb\'d2\'bb\'b8\'f6\'c7\'d0\'c6\'ac\'b6\'d4\'cf\'f3\'a3\'ac\'bf\'c9\'d2\'d4\'b1\'bb\'d3\'c3\'d4\'da\'c8\'ce\'ba\'ce\'c7\'d0\'c6\'ac\'d4\'ca\'d0\'ed\'ca\'b9\'d3\'c3\'b5\'c4\'b5\'d8\'b7\'bd\'a1\'a3\
>>> items = [0, 1, 2, 3, 4, 5, 6]\
>>> a = slice(2, 4)\
>>> items[2:4]\
[2, 3]\
>>> items[a]\
[2, 3]\
>>> items[a] = [10,11]\
>>> items\
[0, 1, 10, 11, 4, 5, 6]\
>>> del items[a]\
>>> items\
[0, 1, 4, 5, 6]\
\'c8\'e7\'b9\'fb\'c4\'e3\'d3\'d0\'d2\'bb\'b8\'f6\'c7\'d0\'c6\'ac\'b6\'d4\'cf\'f3 a\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'b7\'d6\'b1\'f0\'b5\'f7\'d3\'c3\'cb\'fc\'b5\'c4 a.start , a.stop , a.step \'ca\'f4\'d0\'d4\'c0\'b4\'bb\'f1\'c8\'a1\'b8\'fc\'b6\'e0\'b5\'c4\'d0\'c5\'cf\'a2\'a1\'a3\
a = slice(5, 50, 2)\
\
\'b5\'f7\'d3\'c3\'c7\'d0\'c6\'ac\'b5\'c4 indices(size) \'b7\'bd\'b7\'a8\'bd\'ab\'cb\'fc\'d3\'b3\'c9\'e4\'b5\'bd\'d2\'bb\'b8\'f6\'c8\'b7\'b6\'a8\'b4\'f3\'d0\'a1\'b5\'c4\'d0\'f2\
\'c1\'d0\'c9\'cf\'a3\'ac\'d5\'e2\'b8\'f6\'b7\'bd\'b7\'a8\'b7\'b5\'bb\'d8\'d2\'bb\'b8\'f6\'c8\'fd\'d4\'aa\'d7\'e9 (start, stop, step) \'a3\'ac\'cb\'f9\'d3\'d0\'d6\'b5\'b6\'bc\'bb\'e1\'b1\'bb\'ba\'cf\'ca\'ca\'b5\'c4\'cb\'f5\'d0\'a1\'d2\'d4\
\'c2\'fa\'d7\'e3\'b1\'df\'bd\'e7\'cf\'de\'d6\'c6\'a3\'ac\'b4\'d3\'b6\'f8\'ca\'b9\'d3\'c3\'b5\'c4\'ca\'b1\'ba\'f2\'b1\'dc\'c3\'e2\'b3\'f6\'cf\'d6 IndexError \'d2\'ec\'b3\'a3\'a1\'a3\
>>> s = 'HelloWorld'\
>>> a.indices(len(s))\
(5, 10, 2)\
>>> for i in range(*a.indices(len(s))):\
		  ... print(s[i])\
\
1.12 \'d0\'f2\'c1\'d0\'d6\'d0\'b3\'f6\'cf\'d6\'b4\'ce\'ca\'fd\'d7\'ee\'b6\'e0\'b5\'c4\'d4\'aa\'cb\'d8\
words = [\
'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes',\
'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the',\
'eyes', "don't", 'look', 'around', 'the', 'eyes', 'look', 'into',\
'my', 'eyes', "you're", 'under'\
]\
from collections import Counter\
word_counts = Counter(words)\
# \'b3\'f6\'cf\'d6\'c6\'b5\'c2\'ca\'d7\'ee\'b8\'df\'b5\'c4 3 \'b8\'f6\'b5\'a5\'b4\'ca\
top_three = word_counts.most_common(3)\
print(top_three)\
# Outputs [('eyes', 8), ('the', 5), ('look', 4)]\
\
morewords = ['why','are','you','not','looking','in','my','eyes']\
 word_counts.update(morewords)\
\
Counter \'ca\'b5\'c0\'fd\'d2\'bb\'b8\'f6\'cf\'ca\'ce\'aa\'c8\'cb\'d6\'aa\'b5\'c4\'cc\'d8\'d0\'d4\'ca\'c7\'cb\'fc\'c3\'c7\'bf\'c9\'d2\'d4\'ba\'dc\'c8\'dd\'d2\'d7\'b5\'c4\'b8\'fa\'ca\'fd\'d1\'a7\'d4\'cb\'cb\'e3\'b2\'d9\'d7\'f7\'cf\'e0\'bd\'e1\'ba\'cf\'a1\'a3\
>>> a = Counter(words)\
>>> b = Counter(morewords)\
>>> a\
Counter(\{'eyes': 8, 'the': 5, 'look': 4, 'into': 3, 'my': 3, 'around': 2,\
"you're": 1, "don't": 1, 'under': 1, 'not': 1\})\
>>> b\
Counter(\{'eyes': 1, 'looking': 1, 'are': 1, 'in': 1, 'not': 1, 'you': 1,\
'my': 1, 'why': 1\})\
>>> # Combine counts\
>>> c = a + b\
>>> c\
Counter(\{'eyes': 9, 'the': 5, 'look': 4, 'my': 4, 'into': 3, 'not': 2,\
'around': 2, "you're": 1, "don't": 1, 'in': 1, 'why': 1,\
'looking': 1, 'are': 1, 'under': 1, 'you': 1\})\
>>> # Subtract counts\
>>> d = a - b\
>>> d\
Counter(\{'eyes': 7, 'the': 5, 'look': 4, 'into': 3, 'my': 2, 'around': 2,\
"you're": 1, "don't": 1, 'under': 1\})\
>>>\
\
1.13 \'cd\'a8\'b9\'fd\'c4\'b3\'b8\'f6\'b9\'d8\'bc\'fc\'d7\'d6\'c5\'c5\'d0\'f2\'d2\'bb\'b8\'f6\'d7\'d6\'b5\'e4\'c1\'d0\'b1\'ed\
\
\'cd\'a8\'b9\'fd\'ca\'b9\'d3\'c3 operator \'c4\'a3\'bf\'e9\'b5\'c4 itemgetter \'ba\'af\'ca\'fd\'a3\'ac\'bf\'c9\'d2\'d4\'b7\'c7\'b3\'a3\'c8\'dd\'d2\'d7\'b5\'c4\'c5\'c5\'d0\'f2\'a3\'ba\'b8\'f9\'be\'dd\'c4\'b3\'b8\'f6\'bb\'f2\'c4\'b3\'bc\'b8\'b8\'f6\'d7\'d6\'b5\'e4\'d7\'d6\'b6\'ce\'c0\'b4\'c5\'c5\'d0\'f2\'d5\'e2\'b8\'f6\'c1\'d0\'b1\'ed\'a1\'a3\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}