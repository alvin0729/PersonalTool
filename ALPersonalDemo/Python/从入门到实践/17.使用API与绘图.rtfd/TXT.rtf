{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset77 ZapfDingbatsITC;
\f3\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww22420\viewh12400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \
17.1.2 
\f1 \'ca\'b9\'d3\'c3
\f0 API
\f1 \'b5\'f7\'d3\'c3\'c7\'eb\'c7\'f3\'ca\'fd\'be\'dd
\f0 \
https://api.github.com/search/repositories?q=language:python&sort=stars\
\
17.1.3 
\f1 \'b0\'b2\'d7\'b0
\f0 requests\
$ pip install --user requests\
\
17.1.4 
\f1 \'b4\'a6\'c0\'ed
\f0 API
\f1 \'cf\'ec\'d3\'a6
\f0 \
import requests\
# 
\f1 \'d6\'b4\'d0\'d0
\f0 API
\f1 \'b5\'f7\'d3\'c3\'b2\'a2\'b4\'e6\'b4\'a2\'cf\'ec\'d3\'a6
\f0 \
url = 'https://api.github.com/search/repositories?q=language:python&sort=stars'\
r = requests.get(url)\
print("Status code:", r.status_code)\
# 
\f1 \'bd\'ab
\f0 API
\f1 \'cf\'ec\'d3\'a6\'b4\'e6\'b4\'a2\'d4\'da\'d2\'bb\'b8\'f6\'b1\'e4\'c1\'bf\'d6\'d0
\f0 \
response_dict = r.json()\
# 
\f1 \'b4\'a6\'c0\'ed\'bd\'e1\'b9\'fb
\f0 \
print(response_dict.keys())\
\
17.1.5 
\f1 \'b4\'a6\'c0\'ed\'cf\'ec\'d3\'a6\'d7\'d6\'b5\'e4
\f2 \

\f3 print
\f2 (
\f3 "Total
\f2  
\f3 repositories:",
\f2  
\f3 response_dict['total_count']
\f2 )\

\f3 #
\f2  
\f1 \'cc\'bd\'cb\'f7\'d3\'d0\'b9\'d8\'b2\'d6\'bf\'e2\'b5\'c4\'d0\'c5\'cf\'a2
\f2 \

\f3 repo_dicts
\f2  
\f3 =
\f2  
\f3 response_dict['items']
\f2 \

\f3 print
\f2 (
\f3 "Repositories
\f2  
\f3 returned:",
\f2  
\f3 len
\f2 (
\f3 repo_dicts
\f2 ))\

\f3 #
\f2  
\f1 \'d1\'d0\'be\'bf\'b5\'da\'d2\'bb\'b8\'f6\'b2\'d6\'bf\'e2
\f2 \

\f3 repo_dict
\f2  
\f3 =
\f2  
\f3 repo_dicts[0]
\f2 \

\f3 print
\f2 (
\f3 "\\nKeys:",
\f2  
\f3 len
\f2 (
\f3 repo_dict
\f2 ))\

\f3 for
\f2  
\f3 key
\f2  
\f3 in
\f2  
\f3 sorted
\f2 (
\f3 repo_dict.keys
\f2 ())
\f3 :
\f2 \
    
\f3 print
\f2 (
\f3 key
\f2 )
\f0 \
\
# 
\f1 \'d1\'d0\'be\'bf\'b5\'da\'d2\'bb\'b8\'f6\'b2\'d6\'bf\'e2
\f0 \
repo_dict = repo_dicts[0]\
print("\\nSelected information about first repository:")\
print('Name:', repo_dict['name'])\
print('Owner:', repo_dict['owner']['login'])\
print('Stars:', repo_dict['stargazers_count'])\
print('Repository:', repo_dict['html_url'])\
print('Created:', repo_dict['created_at'])\
print('Updated:', repo_dict['updated_at'])\
print('Description:', repo_dict['description'])\
\
17.1.6 
\f1 \'b8\'c5\'ca\'f6\'d7\'ee\'ca\'dc\'bb\'b6\'d3\'ad\'b5\'c4\'b2\'d6\'bf\'e2
\f0 \
# 
\f1 \'d1\'d0\'be\'bf\'d3\'d0\'b9\'d8\'b2\'d6\'bf\'e2\'b5\'c4\'d0\'c5\'cf\'a2
\f0 \
repo_dicts = response_dict['items']\
print("Repositories returned:", len(repo_dicts))\
print("\\nSelected information about each repository:")\
for repo_dict in repo_dicts:\
    print('\\nName:', repo_dict['name'])\
    print('Owner:', repo_dict['owner']['login'])\
    print('Stars:', repo_dict['stargazers_count'])\
    print('Repository:', repo_dict['html_url'])\
    print('Description:', repo_dict['description'])\
\
17.1.7 
\f1 \'bc\'e0\'ca\'d3
\f0 API
\f1 \'b5\'c4\'cb\'d9\'c2\'ca\'cf\'de\'d6\'c6
\f0 \
\
17.2 
\f1 \'ca\'b9\'d3\'c3
\f0 Pygal
\f1 \'bf\'c9\'ca\'d3\'bb\'af\'b2\'d6\'bf\'e2
\f0 \
import requests\
import pygal\
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS\
\
# Make an API call, and store the response.\
url = 'https://api.github.com/search/repositories?q=language:python&sort=stars'\
r = requests.get(url)\
print("Status code:", r.status_code)\
\
# Store API response in a variable.\
response_dict = r.json()\
print("Total repositories:", response_dict['total_count'])\
\
# Explore information about the repositories.\
repo_dicts = response_dict['items']\
\
names, plot_dicts = [], []\
for repo_dict in repo_dicts:\
    names.append(repo_dict['name'])\
    if repo_dict['description']:\
        plot_dict=\{'value':repo_dict['stargazers_count'],\
                   'label':repo_dict['description'],\
                   'xlink':repo_dict['html_url']\
                   \}\
        plot_dicts.append(plot_dict)\
    else:\
        plot_dict=\{'value':repo_dict['stargazers_count'],\
                   'label':'ABC',\
                   'xlink':repo_dict['html_url']\}\
        plot_dicts.append(plot_dict)\
\
# Make visualization.\
my_style = LS('#333366', base_style=LCS)\
\
my_config = pygal.Config()\
my_config.x_label_rotation = 45\
my_config.show_legend = False\
my_config.title_font_size = 24\
my_config.label_font_size = 14\
my_config.major_label_font_size = 18\
my_config.truncate_label = 15\
my_config.show_y_guides = False\
my_config.width = 1000\
\
chart = pygal.Bar(my_config, style=my_style)\
chart.title = 'Most-Starred Python Projects on GitHub'\
chart.x_labels = names\
\
chart.add('', plot_dicts)\
chart.render_to_file('python_repos.svg')\
\
17.2.2 
\f1 \'cc\'ed\'bc\'d3\'d7\'d4\'b6\'a8\'d2\'e5\'b9\'a4\'be\'df\'cc\'e1\'ca\'be
\f0 \
import pygal\
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS\
\
my_style = LS('#333366', base_style=LCS)\
chart = pygal.Bar(style=my_style, x_label_rotation=45, show_legend=False)\
\
chart.title = 'Python Projects'\
chart.x_labels = ['httpie', 'django', 'flask']\
\
plot_dicts = [\
    \{'value': 16101, 'label': 'Description of httpie.'\},\
    \{'value': 15028, 'label': 'Description of django.'\},\
    \{'value': 14798, 'label': 'Description of flask.'\},\
    ]\
\
chart.add('', plot_dicts)\
chart.render_to_file('bar_descriptions.svg')\
\
\
17.2.3 
\f1 \'b8\'f9\'be\'dd\'ca\'fd\'be\'dd\'bb\'e6\'cd\'bc
\f0 \
\
17.3 Hacker News API\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}