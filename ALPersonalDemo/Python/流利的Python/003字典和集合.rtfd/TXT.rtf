{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red255\green0\blue255;\red0\green116\blue0;\red255\green255\blue255;
\red14\green14\blue255;\red196\green26\blue22;\red170\green13\blue145;\red0\green0\blue0;\red28\green0\blue207;
}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c0\c100000;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c5500\c5500\c100000;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c11000\c0\c81000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww16400\viewh17560\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
\
dict \'c0\'e0\'d0\'cd\'b8\'fa\'cb\'fc\'d3\'d0\'b9\'d8\'b5\'c4\'c4\'da\'d6\'c3\'ba\'af\'ca\'fd\'b6\'bc\'d4\'da __builtins__.__dict__\'c4\'a3\'bf\'e9\'d6\'d0\'a1\'a3\
\
3.1 \'b7\'ba\'d3\'b3\'c9\'e4\'c0\'e0\'d0\'cd\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 {{\NeXTGraphic Pasted Graphic.tiff \width12760 \height6000
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
\
>>> my_dict = \{\}\
>>> isinstance(my_dict, abc.Mapping)\
True\
\'d5\'e2\'c0\'ef\'d3\'c3 isinstance \'b6\'f8\'b2\'bb\'ca\'c7 type \'c0\'b4\'bc\'ec\'b2\'e9\'c4\'b3\'b8\'f6\'b2\'ce\'ca\'fd\'ca\'c7\'b7\'f1\'ce\'aa dict \'c0\'e0\'d0\'cd\'a3\'ac\
\'d2\'f2\'ce\'aa\'d5\'e2\'b8\'f6\'b2\'ce\'ca\'fd\'d3\'d0\'bf\'c9\'c4\'dc\'b2\'bb\'ca\'c7 dict\'a3\'ac \'b6\'f8\'ca\'c7\'d2\'bb\'b8\'f6\'b1\'c8\'bd\'cf\'c1\'ed\'c0\'e0\'b5\'c4\'d3\'b3\'c9\'e4\'c0\'e0\'d0\'cd\'a1\'a3\
\
\'d4\'ad\'d7\'d3\'b2\'bb\'bf\'c9\'b1\'e4\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd\'a3\'a8 str\'a1\'a2 bytes \'ba\'cd\'ca\'fd\'d6\'b5\'c0\'e0\'d0\'cd\'a3\'a9 \'b6\'bc\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'c0\'e0\
\'d0\'cd\'a3\'ac frozenset \'d2\'b2\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\'a3\'ac \'d2\'f2\'ce\'aa\'b8\'f9\'be\'dd\'c6\'e4\'b6\'a8\'d2\'e5\'a3\'ac frozenset \'c0\'ef\
\'d6\'bb\'c4\'dc\'c8\'dd\'c4\'c9\'bf\'c9\'c9\'a2\'c1\'d0\'c0\'e0\'d0\'cd\'a1\'a3 \'d4\'aa\'d7\'e9\'b5\'c4\'bb\'b0\'a3\'ac \'d6\'bb\'d3\'d0\'b5\'b1\'d2\'bb\'b8\'f6\'d4\'aa\'d7\'e9\'b0\'fc\'ba\'ac\'b5\'c4\'cb\'f9\'d3\'d0\'d4\'aa\'cb\'d8\
\'b6\'bc\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'c0\'e0\'d0\'cd\'b5\'c4\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac \'cb\'fc\'b2\'c5\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\'a1\'a3 \
\
>>> tt = (1, 2, (30, 40))\
>>> hash(tt)\
8027212646858338501\
>>> tl = (1, 2, [30, 40])\
>>> hash(tl)\
Traceback (most recent call last):\
File "<stdin>", line 1, in <module>\
TypeError: unhashable type: 'list'\
>>> tf = (1, 2, frozenset([30, 40]))\
>>> hash(tf)\
-4118419923444501110\
\
\'d2\'bb\'b0\'e3\'c0\'b4\'bd\'b2\'d3\'c3\'bb\'a7\'d7\'d4\'b6\'a8\'d2\'e5\'b5\'c4\'c0\'e0\'d0\'cd\'b5\'c4\'b6\'d4\'cf\'f3\'b6\'bc\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\'a3\'ac \'c9\'a2\'c1\'d0\'d6\'b5\'be\'cd\'ca\'c7\'cb\'fc\'c3\'c7\
\'b5\'c4 id() \'ba\'af\'ca\'fd\'b5\'c4\'b7\'b5\'bb\'d8\'d6\'b5\'a3\'ac \'cb\'f9\'d2\'d4\'cb\'f9\'d3\'d0\'d5\'e2\'d0\'a9\'b6\'d4\'cf\'f3\'d4\'da\'b1\'c8\'bd\'cf\'b5\'c4\'ca\'b1\'ba\'f2\'b6\'bc\'ca\'c7\'b2\'bb\'cf\'e0\
\'b5\'c8\'b5\'c4\'a1\'a3 \
\
\'d7\'d6\'b5\'e4\'cc\'e1\'b9\'a9\'c1\'cb\'ba\'dc\'b6\'e0\'d6\'d6\'b9\'b9\'d4\'ec\'b7\'bd\'b7\'a8\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict"}}{\fldrslt \cf2 https://docs.python.org/3/library/stdtypes.html#mapping-types-dict}}\
\
>>> a = dict(one=1, two=2, three=3)\
>>> b = \{'one': 1, 'two': 2, 'three': 3\}\
>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\
>>> d = dict([('two', 2), ('one', 1), ('three', 3)])\
>>> e = dict(\{'three': 3, 'one': 1, 'two': 2\})\
>>> a == b == c == d == e\
True\
\
\
3.2 \'d7\'d6\'b5\'e4\'cd\'c6\'b5\'bc\'a3\'a8 dictcomp\'a3\'a9 \
>>> DIAL_CODES = [ \uc0\u10122 \
... (86, 'China'),\
... (91, 'India'),\
... (1, 'United States'),\
... (62, 'Indonesia'),\
... (55, 'Brazil'),\
... (92, 'Pakistan'),\
... (880, 'Bangladesh'),\
... (234, 'Nigeria'),\
... (7, 'Russia'),\
... (81, 'Japan'),\
... ]\
>>> country_code = \{country: code for code, country in DIAL_CODES\} \uc0\u10123 \
>>> country_code\
\{'China': 86, 'India': 91, 'Bangladesh': 880, 'United States': 1,\
'Pakistan': 92, 'Japan': 81, 'Russia': 7, 'Brazil': 55, 'Nigeria':\
234, 'Indonesia': 62\}\
>>> \{code: country.upper() for country, code in country_code.items() \uc0\u10124 \
... if code < 66\}\
\{1: 'UNITED STATES', 55: 'BRAZIL', 62: 'INDONESIA', 7: 'RUSSIA'\}\
\
3.3 \'b3\'a3\'bc\'fb\'b5\'c4\'d3\'b3\'c9\'e4\'b7\'bd\'b7\'a8\
P137\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 1.tiff \width12360 \height9160
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
\
\'d3\'c3setdefault\'b4\'a6\'c0\'ed\'d5\'d2\'b2\'bb\'b5\'bd\'b5\'c4\'bc\'fc\
\'bf\'c9\'d2\'d4\'d3\'c3 d.get(k, default) \'c0\'b4\'b4\'fa\'cc\'e6 d[k]\'a3\'ac \'b8\'f8\'d5\'d2\'b2\'bb\'b5\'bd\'b5\'c4\'bc\'fc\'d2\'bb\'b8\'f6\'c4\'ac\'c8\'cf\'b5\'c4\
\'b7\'b5\'bb\'d8\'d6\'b5\'a3\'a8 \'d5\'e2\'b1\'c8\'b4\'a6\'c0\'ed KeyError \'d2\'aa\'b7\'bd\'b1\'e3\'b2\'bb\'c9\'d9\'a3\'a9,dict.get \'b2\'a2\'b2\'bb\'ca\'c7\'b4\'a6\'c0\'ed\'d5\'d2\'b2\'bb\'b5\'bd\'b5\'c4\'bc\'fc\'b5\'c4\'d7\'ee\'ba\'c3\'b7\'bd\'b7\'a8\'a1\'a3\
\
\'ca\'be\'c0\'fd 3-2 index0.py \'d5\'e2\'b6\'ce\'b3\'cc\'d0\'f2\'b4\'d3\'cb\'f7\'d2\'fd\'d6\'d0\'bb\'f1\'c8\'a1\'b5\'a5\'b4\'ca\'b3\'f6\'cf\'d6\'b5\'c4\'c6\'b5\'c2\'ca\'d0\'c5\
\'cf\'a2\'a3\'ac \'b2\'a2\'b0\'d1\'cb\'fc\'c3\'c7\'d0\'b4\'bd\'f8\'b6\'d4\'d3\'a6\'b5\'c4\'c1\'d0\'b1\'ed\'c0\'ef\'a3\'a8 \'b8\'fc\'ba\'c3\'b5\'c4\'bd\'e2\'be\'f6\'b7\'bd\'b0\'b8\'d4\'da\'ca\'be\'c0\'fd 3-4 \'d6\'d0\'a3\'a9\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf3 \cb4 # adapted from Alex Martelli's example in "Re-learning Python"
\f1\fs24 \cf0 \

\f2\fs28 \cf3 # \cf5 http://www.aleax.it/Python/accu04_Relearn_Python_alex.pdf
\f1\fs24 \cf0 \

\f2\fs28 \cf3 # (slide 41) Ex: lines-by-word file index
\f1\fs24 \cf0 \
\

\f2\fs28 \cf3 # BEGIN INDEX0
\f1\fs24 \cf0 \

\f2\fs28 \cf6 """Build an index mapping word -> list of occurrences"""
\f1\fs24 \cf0 \
\

\f2\fs28 \cf7 import\cf8  sys
\f1\fs24 \cf0 \

\f2\fs28 \cf7 import\cf8  re
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8 WORD_RE = re.compile(\cf9 '\\w+'\cf8 )
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8 index = \{\}
\f1\fs24 \cf0 \

\f2\fs28 \cf7 with\cf8  open(sys.argv[\cf9 1\cf8 ], encoding=\cf9 'utf-8'\cf8 ) \cf7 as\cf8  fp:
\f1\fs24 \cf0 \

\f2\fs28 \cf8     \cf7 for\cf8  line_no, line \cf7 in\cf8  enumerate(fp, \cf9 1\cf8 ):
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 for\cf8  match \cf7 in\cf8  WORD_RE.finditer(line):
\f1\fs24 \cf0 \

\f2\fs28 \cf8             word = match.group()
\f1\fs24 \cf0 \

\f2\fs28 \cf8             column_no = match.start()\cf9 +1
\f1\fs24 \cf0 \

\f2\fs28 \cf8             location = (line_no, column_no)
\f1\fs24 \cf0 \

\f2\fs28 \cf8             \cf3 # this is ugly; coded like this to make a point
\f1\fs24 \cf0 \

\f2\fs28 \cf8             occurrences = index.get(word, [])  \cf3 # <1>
\f1\fs24 \cf0 \

\f2\fs28 \cf8             occurrences.append(location)       \cf3 # <2>
\f1\fs24 \cf0 \

\f2\fs28 \cf8             index[word] = occurrences          \cf3 # <3>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf3 # print in alphabetical order
\f1\fs24 \cf0 \

\f2\fs28 \cf7 for\cf8  word \cf7 in\cf8  sorted(index, key=str.upper):  \cf3 # <4>
\f1\fs24 \cf0 \

\f2\fs28 \cf8     \cf7 print\cf8 (word, index[word])
\f1\fs24 \cf0 \

\f2\fs28 \cf3 # END INDEX0
\f0\fs36 \cf2 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\'ca\'be\'c0\'fd 3-4 index.py \'d3\'c3\'d2\'bb\'d0\'d0\'be\'cd\'bd\'e2\'be\'f6\'c1\'cb\'bb\'f1\'c8\'a1\'ba\'cd\'b8\'fc\'d0\'c2\'b5\'a5\'b4\'ca\'b5\'c4\'b3\'f6\'cf\'d6\'c7\'e9\'bf\'f6\'c1\'d0\
\'b1\'ed\'a3\'ac \'b5\'b1\'c8\'bb\'b8\'fa\'ca\'be\'c0\'fd 3-2 \'b2\'bb\'d2\'bb\'d1\'f9\'b5\'c4\'ca\'c7\'a3\'ac \'d5\'e2\'c0\'ef\'d3\'c3\'b5\'bd\'c1\'cb dict.setdefault\
\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf7 \cb4 import\cf8  sys
\f1\fs24 \cf0 \

\f2\fs28 \cf7 import\cf8  re
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8 WORD_RE = re.compile(\cf9 '\\w+'\cf8 )
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8 index = \{\}
\f1\fs24 \cf0 \

\f2\fs28 \cf7 with\cf8  open(sys.argv[\cf9 1\cf8 ], encoding=\cf9 'utf-8'\cf8 ) \cf7 as\cf8  fp:
\f1\fs24 \cf0 \

\f2\fs28 \cf8     \cf7 for\cf8  line_no, line \cf7 in\cf8  enumerate(fp, \cf9 1\cf8 ):
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 for\cf8  match \cf7 in\cf8  WORD_RE.finditer(line):
\f1\fs24 \cf0 \

\f2\fs28 \cf8             word = match.group()
\f1\fs24 \cf0 \

\f2\fs28 \cf8             column_no = match.start()\cf9 +1
\f1\fs24 \cf0 \

\f2\fs28 \cf8             location = (line_no, column_no)
\f1\fs24 \cf0 \

\f2\fs28 \cf8             index.setdefault(word, []).append(location)  \cf3 # <1>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf3 # print in alphabetical order
\f1\fs24 \cf0 \

\f2\fs28 \cf7 for\cf8  word \cf7 in\cf8  sorted(index, key=str.upper):
\f1\fs24 \cf0 \

\f2\fs28 \cf8     \cf7 print\cf8 (word, index[word])
\f0\fs36 \cf2 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \uc0\u10122  \'bb\'f1\'c8\'a1\'b5\'a5\'b4\'ca\'b5\'c4\'b3\'f6\'cf\'d6\'c7\'e9\'bf\'f6\'c1\'d0\'b1\'ed\'a3\'ac \'c8\'e7\'b9\'fb\'b5\'a5\'b4\'ca\'b2\'bb\'b4\'e6\'d4\'da\'a3\'ac \'b0\'d1\'b5\'a5\'b4\'ca\'ba\'cd\'d2\'bb\'b8\'f6\'bf\'d5\'c1\'d0\'b1\'ed\
\'b7\'c5\'bd\'f8\'d3\'b3\'c9\'e4\'a3\'ac \'c8\'bb\'ba\'f3\'b7\'b5\'bb\'d8\'d5\'e2\'b8\'f6\'bf\'d5\'c1\'d0\'b1\'ed\'a3\'ac \'d5\'e2\'d1\'f9\'be\'cd\'c4\'dc\'d4\'da\'b2\'bb\'bd\'f8\'d0\'d0\'b5\'da\'b6\'fe\'b4\'ce\'b2\'e9\'d5\'d2\'b5\'c4\'c7\'e9\'bf\'f6\
\'cf\'c2\'b8\'fc\'d0\'c2\'c1\'d0\'b1\'ed\'c1\'cb\'a1\'a3\
\
3.4 \'d3\'b3\'c9\'e4\'b5\'c4\'b5\'af\'d0\'d4\'bc\'fc\'b2\'e9\'d1\'af\
\'d3\'d0\'ca\'b1\'ba\'f2\'ce\'aa\'c1\'cb\'b7\'bd\'b1\'e3\'c6\'f0\'bc\'fb\'a3\'ac \'be\'cd\'cb\'e3\'c4\'b3\'b8\'f6\'bc\'fc\'d4\'da\'d3\'b3\'c9\'e4\'c0\'ef\'b2\'bb\'b4\'e6\'d4\'da\'a3\'ac \'ce\'d2\'c3\'c7\'d2\'b2\'cf\'a3\'cd\'fb\'d4\'da\'cd\'a8\'b9\'fd\
\'d5\'e2\'b8\'f6\'bc\'fc\'b6\'c1\'c8\'a1\'d6\'b5\'b5\'c4\'ca\'b1\'ba\'f2\'c4\'dc\'b5\'c3\'b5\'bd\'d2\'bb\'b8\'f6\'c4\'ac\'c8\'cf\'d6\'b5\'a1\'a3\
\
3.4.1 defaultdict\'a3\'ba \'b4\'a6\'c0\'ed\'d5\'d2\'b2\'bb\'b5\'bd\'b5\'c4\'bc\'fc\'b5\'c4\'d2\'bb\'b8\'f6\'d1\'a1\'d4\'f1\
dd = defaultdict(list)\'a3\'ac \'c8\'e7\'b9\'fb\'bc\'fc\
'new-key' \'d4\'da dd \'d6\'d0\'bb\'b9\'b2\'bb\'b4\'e6\'d4\'da\'b5\'c4\'bb\'b0\'a3\'ac \'b1\'ed\'b4\'ef\'ca\'bd dd['new-key'] \'bb\'e1\'b0\'b4\'d5\'d5\'d2\'d4\
\'cf\'c2\'b5\'c4\'b2\'bd\'d6\'e8\'c0\'b4\'d0\'d0\'ca\'c2\'a1\'a3\
\
(1) \'b5\'f7\'d3\'c3 list() \'c0\'b4\'bd\'a8\'c1\'a2\'d2\'bb\'b8\'f6\'d0\'c2\'c1\'d0\'b1\'ed\'a1\'a3\
(2) \'b0\'d1\'d5\'e2\'b8\'f6\'d0\'c2\'c1\'d0\'b1\'ed\'d7\'f7\'ce\'aa\'d6\'b5\'a3\'ac 'new-key' \'d7\'f7\'ce\'aa\'cb\'fc\'b5\'c4\'bc\'fc\'a3\'ac \'b7\'c5\'b5\'bd dd \'d6\'d0\'a1\'a3\
(3) \'b7\'b5\'bb\'d8\'d5\'e2\'b8\'f6\'c1\'d0\'b1\'ed\'b5\'c4\'d2\'fd\'d3\'c3\'a1\'a3\
\
\'ca\'be\'c0\'fd 3-5 index_default.py\'a3\'ba \'c0\'fb\'d3\'c3 defaultdict \'ca\'b5\'c0\'fd\'b6\'f8\'b2\'bb\'ca\'c7setdefault \'b7\'bd\'b7\'a8\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf7 \cb4 import\cf8  sys
\f1\fs24 \cf0 \

\f2\fs28 \cf7 import\cf8  re
\f1\fs24 \cf0 \

\f2\fs28 \cf7 import\cf8  collections
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8 WORD_RE = re.compile(\cf9 '\\w+'\cf8 )
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8 index = collections.defaultdict(list)     \cf3 # <1>
\f1\fs24 \cf0 \

\f2\fs28 \cf7 with\cf8  open(sys.argv[\cf9 1\cf8 ], encoding=\cf9 'utf-8'\cf8 ) \cf7 as\cf8  fp:
\f1\fs24 \cf0 \

\f2\fs28 \cf8     \cf7 for\cf8  line_no, line \cf7 in\cf8  enumerate(fp, \cf9 1\cf8 ):
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 for\cf8  match \cf7 in\cf8  WORD_RE.finditer(line):
\f1\fs24 \cf0 \

\f2\fs28 \cf8             word = match.group()
\f1\fs24 \cf0 \

\f2\fs28 \cf8             column_no = match.start()\cf9 +1
\f1\fs24 \cf0 \

\f2\fs28 \cf8             location = (line_no, column_no)
\f1\fs24 \cf0 \

\f2\fs28 \cf8             index[word].append(location)  \cf3 # <2>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf3 # print in alphabetical order
\f1\fs24 \cf0 \

\f2\fs28 \cf7 for\cf8  word \cf7 in\cf8  sorted(index, key=str.upper):
\f1\fs24 \cf0 \

\f2\fs28 \cf8     \cf7 print\cf8 (word, index[word])
\f0\fs36 \cf2 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
3.4.2 \'cc\'d8\'ca\'e2\'b7\'bd\'b7\'a8__missing__\
\'c8\'e7\'b9\'fb\
\'d3\'d0\'d2\'bb\'b8\'f6\'c0\'e0\'bc\'cc\'b3\'d0\'c1\'cb dict\'a3\'ac \'c8\'bb\'ba\'f3\'d5\'e2\'b8\'f6\'bc\'cc\'b3\'d0\'c0\'e0\'cc\'e1\'b9\'a9\'c1\'cb __missing__ \'b7\'bd\'b7\'a8\'a3\'ac \'c4\'c7\
\'c3\'b4\'d4\'da __getitem__ \'c5\'f6\'b5\'bd\'d5\'d2\'b2\'bb\'b5\'bd\'b5\'c4\'bc\'fc\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac Python \'be\'cd\'bb\'e1\'d7\'d4\'b6\'af\'b5\'f7\'d3\'c3\'cb\'fc\'a3\'ac\
\'b6\'f8\'b2\'bb\'ca\'c7\'c5\'d7\'b3\'f6\'d2\'bb\'b8\'f6 KeyError \'d2\'ec\'b3\'a3\'a1\'a3\
\
\'ca\'be\'c0\'fd 3-6 \'b5\'b1\'d3\'d0\'b7\'c7\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'bc\'fc\'b1\'bb\'b2\'e9\'d5\'d2\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac StrKeyDict0 \'ca\'c7\'c8\'e7\'ba\'ce\
\'d4\'da\'b8\'c3\'bc\'fc\'b2\'bb\'b4\'e6\'d4\'da\'b5\'c4\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac \'b0\'d1\'cb\'fc\'d7\'aa\'bb\'bb\'ce\'aa\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\
\
\'c8\'e7\'b9\'fb str(k) \'b2\'bb\'ca\'c7\'d2\'bb\'b8\'f6\'b4\'e6\'d4\'da\'b5\'c4\'bc\'fc\'a3\'ac \'b4\'fa\'c2\'eb\'be\'cd\'bb\'e1\'cf\'dd\'c8\'eb\'ce\'de\
\'cf\'de\'b5\'dd\'b9\'e9\'a1\'a3 \'d5\'e2\'ca\'c7\'d2\'f2\'ce\'aa __missing__ \'b5\'c4\'d7\'ee\'ba\'f3\'d2\'bb\'d0\'d0\'d6\'d0\'b5\'c4 self[str(key)] \'bb\'e1\
\'b5\'f7\'d3\'c3 __getitem__\'a3\'ac \'b6\'f8\'d5\'e2\'b8\'f6 str(key) \'d3\'d6\'b2\'bb\'b4\'e6\'d4\'da\'a3\'ac \'d3\'da\'ca\'c7 __missing__\
\'d3\'d6\'bb\'e1\'b1\'bb\'b5\'f7\'d3\'c3\'a1\'a3\
\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf3 \cb4 # BEGIN STRKEYDICT0
\f1\fs24 \cf0 \

\f2\fs28 \cf7 class\cf8  StrKeyDict0(dict):  \cf3 # <1>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8     \cf7 def\cf8  __missing__(self, key):
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 if\cf8  isinstance(key, str):  \cf3 # <2>
\f1\fs24 \cf0 \

\f2\fs28 \cf8             \cf7 raise\cf8  KeyError(key)
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 return\cf8  self[str(key)]  \cf3 # <3>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8     \cf7 def\cf8  get(self, key, default=\cf7 None\cf8 ):
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 try\cf8 :
\f1\fs24 \cf0 \

\f2\fs28 \cf8             \cf7 return\cf8  self[key]  \cf3 # <4>
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 except\cf8  KeyError:
\f1\fs24 \cf0 \

\f2\fs28 \cf8             \cf7 return\cf8  default  \cf3 # <5>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8     \cf7 def\cf8  __contains__(self, key):
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 return\cf8  key \cf7 in\cf8  self.keys() \cf7 or\cf8  str(key) \cf7 in\cf8  self.keys()  \cf3 # <6>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf3 # END STRKEYDICT0
\f0\fs36 \cf2 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf6 \cb4 """StrKeyDict0 converts non-string keys to `str` on lookup
\f1\fs24 \cf0 \
\

\f2\fs28 \cf6 # BEGIN STRKEYDICT0_TESTS
\f1\fs24 \cf0 \
\

\f2\fs28 \cf6 Tests for item retrieval using `d[key]` notation::
\f1\fs24 \cf0 \
\

\f2\fs28 \cf6     >>> d = StrKeyDict0([('2', 'two'), ('4', 'four')])
\f1\fs24 \cf0 \

\f2\fs28 \cf6     >>> d['2']
\f1\fs24 \cf0 \

\f2\fs28 \cf6     'two'
\f1\fs24 \cf0 \

\f2\fs28 \cf6     >>> d[4]
\f1\fs24 \cf0 \

\f2\fs28 \cf6     'four'
\f1\fs24 \cf0 \

\f2\fs28 \cf6     >>> d[1]
\f1\fs24 \cf0 \

\f2\fs28 \cf6     Traceback (most recent call last):
\f1\fs24 \cf0 \

\f2\fs28 \cf6       ...
\f1\fs24 \cf0 \

\f2\fs28 \cf6     KeyError: '1'
\f1\fs24 \cf0 \
\

\f2\fs28 \cf6 Tests for item retrieval using `d.get(key)` notation::
\f1\fs24 \cf0 \
\

\f2\fs28 \cf6     >>> d.get('2')
\f1\fs24 \cf0 \

\f2\fs28 \cf6     'two'
\f1\fs24 \cf0 \

\f2\fs28 \cf6     >>> d.get(4)
\f1\fs24 \cf0 \

\f2\fs28 \cf6     'four'
\f1\fs24 \cf0 \

\f2\fs28 \cf6     >>> d.get(1, 'N/A')
\f1\fs24 \cf0 \

\f2\fs28 \cf6     'N/A'
\f1\fs24 \cf0 \
\
\

\f2\fs28 \cf6 Tests for the `in` operator::
\f1\fs24 \cf0 \
\

\f2\fs28 \cf6     >>> 2 in d
\f1\fs24 \cf0 \

\f2\fs28 \cf6     True
\f1\fs24 \cf0 \

\f2\fs28 \cf6     >>> 1 in d
\f1\fs24 \cf0 \

\f2\fs28 \cf6     False
\f1\fs24 \cf0 \
\

\f2\fs28 \cf6 # END STRKEYDICT0_TESTS
\f1\fs24 \cf0 \

\f2\fs28 \cf6 """
\f0\fs36 \cf2 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\'cf\'f1 k in my_dict.keys() \'d5\'e2\'d6\'d6\'b2\'d9\'d7\'f7\'d4\'da Python 3 \'d6\'d0\'ca\'c7\'ba\'dc\'bf\'ec\
\'b5\'c4\'a3\'ac \'b6\'f8\'c7\'d2\'bc\'b4\'b1\'e3\'d3\'b3\'c9\'e4\'c0\'e0\'d0\'cd\'b6\'d4\'cf\'f3\'ba\'dc\'c5\'d3\'b4\'f3\'d2\'b2\'c3\'bb\'b9\'d8\'cf\'b5\'a1\'a3 \'d5\'e2\'ca\'c7\'d2\'f2\'ce\'aa\
dict.keys() \'b5\'c4\'b7\'b5\'bb\'d8\'d6\'b5\'ca\'c7\'d2\'bb\'b8\'f6\'a1\'b0\'ca\'d3\'cd\'bc\'a1\'b1\'a1\'a3 \'ca\'d3\'cd\'bc\'be\'cd\'cf\'f1\'d2\'bb\'b8\'f6\'bc\'af\'ba\'cf\'a3\'ac \'b6\'f8\'c7\'d2\'b8\'fa\
\'d7\'d6\'b5\'e4\'c0\'e0\'cb\'c6\'b5\'c4\'ca\'c7\'a3\'ac \'d4\'da\'ca\'d3\'cd\'bc\'c0\'ef\'b2\'e9\'d5\'d2\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'b5\'c4\'cb\'d9\'b6\'c8\'ba\'dc\'bf\'ec\'a1\'a3 \'d4\'da\'a1\'b0Dictionary\
view\
objects\'a1\'b1\'a3\'a8 {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#dictionaryview-objects"}}{\fldrslt https://docs.python.org/3/library/stdtypes.html#dictionaryview-objects}}\'a3\'a9 \'c0\'ef\'bf\'c9\'d2\'d4\'d5\'d2\'b5\'bd\'b9\'d8\'d3\'da\'d5\'e2\'b8\'f6\'cf\'b8\'bd\'da\'b5\'c4\'ce\'c4\'b5\'b5\'a1\'a3\
\
\
3.5 \'d7\'d6\'b5\'e4\'b5\'c4\'b1\'e4\'d6\'d6\
collections.OrderedDict\
\'d5\'e2\'b8\'f6\'c0\'e0\'d0\'cd\'d4\'da\'cc\'ed\'bc\'d3\'bc\'fc\'b5\'c4\'ca\'b1\'ba\'f2\'bb\'e1\'b1\'a3\'b3\'d6\'cb\'b3\'d0\'f2\'a3\'ac \'d2\'f2\'b4\'cb\'bc\'fc\'b5\'c4\'b5\'fc\'b4\'fa\'b4\'ce\'d0\'f2\'d7\'dc\'ca\'c7\'d2\'bb\'d6\'c2\
\'b5\'c4\'a1\'a3 OrderedDict \'b5\'c4 popitem \'b7\'bd\'b7\'a8\'c4\'ac\'c8\'cf\'c9\'be\'b3\'fd\'b2\'a2\'b7\'b5\'bb\'d8\'b5\'c4\'ca\'c7\'d7\'d6\'b5\'e4\'c0\'ef\'b5\'c4\'d7\'ee\'ba\'f3\
\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'a3\'ac \'b5\'ab\'ca\'c7\'c8\'e7\'b9\'fb\'cf\'f1 my_odict.popitem(last=False) \'d5\'e2\'d1\'f9\'b5\'f7\'d3\'c3\
\'cb\'fc\'a3\'ac \'c4\'c7\'c3\'b4\'cb\'fc\'c9\'be\'b3\'fd\'b2\'a2\'b7\'b5\'bb\'d8\'b5\'da\'d2\'bb\'b8\'f6\'b1\'bb\'cc\'ed\'bc\'d3\'bd\'f8\'c8\'a5\'b5\'c4\'d4\'aa\'cb\'d8\'a1\'a3\
\
collections.ChainMap\
\'b8\'c3\'c0\'e0\'d0\'cd\'bf\'c9\'d2\'d4\'c8\'dd\'c4\'c9\'ca\'fd\'b8\'f6\'b2\'bb\'cd\'ac\'b5\'c4\'d3\'b3\'c9\'e4\'b6\'d4\'cf\'f3\'a3\'ac \'c8\'bb\'ba\'f3\'d4\'da\'bd\'f8\'d0\'d0\'bc\'fc\'b2\'e9\'d5\'d2\'b2\'d9\'d7\'f7\'b5\'c4\'ca\'b1\
\'ba\'f2\'a3\'ac \'d5\'e2\'d0\'a9\'b6\'d4\'cf\'f3\'bb\'e1\'b1\'bb\'b5\'b1\'d7\'f7\'d2\'bb\'b8\'f6\'d5\'fb\'cc\'e5\'b1\'bb\'d6\'f0\'b8\'f6\'b2\'e9\'d5\'d2\'a3\'ac \'d6\'b1\'b5\'bd\'bc\'fc\'b1\'bb\'d5\'d2\'b5\'bd\'ce\'aa\'d6\'b9\'a1\'a3 \
\'a3\'a8 {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/collections.html#collections.ChainMap"}}{\fldrslt https://docs.python.org/3/library/collections.html#collections.ChainMap}}\'a3\'a9\
\
collections.Counter\
\'d5\'e2\'b8\'f6\'c0\'e0\'d0\'cd\'bf\'c9\'d2\'d4\'d3\'c3\'c0\'b4\'b8\'f8\'bf\'c9\'c9\'a2\'c1\'d0\'b1\'ed\'b6\'d4\'cf\'f3\'bc\'c6\'ca\'fd\'a3\'ac \'bb\'f2\'d5\'df\'ca\'c7\'b5\'b1\'b3\'c9\'b6\'e0\'d6\'d8\'bc\'af\'c0\'b4\'d3\'c3\
\'cf\'ea\'c7\'e9\'b2\'ce\'d4\'c4\'ce\'c4\'b5\'b5\
\'a3\'a8 {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/collections.html#collections.Counter"}}{\fldrslt https://docs.python.org/3/library/collections.html#collections.Counter}}\'a3\'a9\
\
>>> ct = collections.Counter('abracadabra')\
>>> ct\
Counter(\{'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1\})\
>>> ct.update('aaaaazzz')\
>>> ct\
Counter(\{'a': 10, 'z': 3, 'b': 2, 'r': 2, 'c': 1, 'd': 1\})\
>>> ct.most_common(2)\
[('a', 10), ('z', 3)]\
\
colllections.UserDict\'c8\'c3\'d3\'c3\'bb\'a7\'bc\'cc\'b3\'d0\'d0\'b4\'d7\'d3\'c0\'e0\'b5\'c4\'a1\'a3\
\
\
3.6 \'d7\'d3\'c0\'e0\'bb\'afUserDict\
\
\'ca\'be\'c0\'fd 3-8 \'ce\'de\'c2\'db\'ca\'c7\'cc\'ed\'bc\'d3\'a1\'a2 \'b8\'fc\'d0\'c2\'bb\'b9\'ca\'c7\'b2\'e9\'d1\'af\'b2\'d9\'d7\'f7\'a3\'ac StrKeyDict \'b6\'bc\'bb\'e1\'b0\'d1\
\'b7\'c7\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'bc\'fc\'d7\'aa\'bb\'bb\'ce\'aa\'d7\'d6\'b7\'fb\'b4\'ae\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf3 \cb4 # BEGIN STRKEYDICT
\f1\fs24 \cf0 \
\

\f2\fs28 \cf7 import\cf8  collections
\f1\fs24 \cf0 \
\

\f2\fs28 \cf7 class\cf8  StrKeyDict(collections.UserDict):  \cf3 # <1>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8     \cf7 def\cf8  __missing__(self, key):  \cf3 # <2>
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 if\cf8  isinstance(key, str):
\f1\fs24 \cf0 \

\f2\fs28 \cf8             \cf7 raise\cf8  KeyError(key)
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 return\cf8  self[str(key)]
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8     \cf7 def\cf8  __contains__(self, key):
\f1\fs24 \cf0 \

\f2\fs28 \cf8         \cf7 return\cf8  str(key) \cf7 in\cf8  self.data  \cf3 # <3>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf8     \cf7 def\cf8  __setitem__(self, key, item):
\f1\fs24 \cf0 \

\f2\fs28 \cf8         self.data[str(key)] = item   \cf3 # <4>
\f1\fs24 \cf0 \
\

\f2\fs28 \cf3 # END STRKEYDICT
\f0\fs36 \cf2 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
UserDict \'b2\'a2\'b2\'bb\'ca\'c7 dict \'b5\'c4\'d7\'d3\'c0\'e0\'a3\'ac \'b5\'ab\'ca\'c7UserDict \'d3\'d0\'d2\'bb\'b8\'f6\'bd\'d0\'d7\'f7 data \'b5\'c4\'ca\'f4\'d0\'d4\'a3\'ac \'ca\'c7 dict \'b5\'c4\'ca\'b5\'c0\'fd\
UserDict \'b5\'c4\'d7\'d3\'c0\'e0\'be\'cd\'c4\'dc\'d4\'da\'ca\'b5\'cf\'d6 __setitem__ \'b5\'c4\'ca\'b1\'ba\'f2\'b1\'dc\'c3\'e2\'b2\'bb\'b1\'d8\'d2\'aa\'b5\'c4\'b5\'dd\'b9\'e9\'a3\'ac \'d2\'b2\'bf\'c9\'d2\'d4\'c8\'c3 __contains__ \'c0\'ef\'b5\'c4\'b4\'fa\'c2\'eb\'b8\'fc\'bc\'f2\'bd\'e0\'a1\'a3\
\
\uc0\u10105  __setitem__ \'bb\'e1\'b0\'d1\'cb\'f9\'d3\'d0\'b5\'c4\'bc\'fc\'b6\'bc\'d7\'aa\'bb\'bb\'b3\'c9\'d7\'d6\'b7\'fb\'b4\'ae\'a1\'a3\
\
\'d2\'f2\'ce\'aa UserDict \'bc\'cc\'b3\'d0\'b5\'c4\'ca\'c7 MutableMapping\'a3\'ac \'cb\'f9\'d2\'d4 StrKeyDict \'c0\'ef\'ca\'a3\'cf\'c2\
\'b5\'c4\'c4\'c7\'d0\'a9\'d3\'b3\'c9\'e4\'c0\'e0\'d0\'cd\'b5\'c4\'b7\'bd\'b7\'a8\'b6\'bc\'ca\'c7\'b4\'d3 UserDict\'a1\'a2 MutableMapping \'ba\'cd\
Mapping \'d5\'e2\'d0\'a9\'b3\'ac\'c0\'e0\'bc\'cc\'b3\'d0\'b6\'f8\'c0\'b4\'b5\'c4\'a1\'a3\
\
MutableMapping.update:\
\'d3\'c3 self[key] = value \'c0\'b4\'cc\'ed\'bc\'d3\'d0\'c2\'d6\'b5\'b5\'c4\'a3\'ac \'cb\'f9\'d2\'d4\'cb\'fc\'c6\'e4\'ca\'b5\'ca\'c7\'d4\'da\'ca\'b9\'d3\'c3\'ce\'d2\'c3\'c7\'b5\'c4 __setitem__ \'b7\'bd\'b7\'a8\'a1\'a3\
\
Mapping.get:\
Python \'b5\'c4\'d4\'b4\'c2\'eb\'a3\'a8 {\field{\*\fldinst{HYPERLINK "https://hg.python.org/cpython/file/3.4/Lib/_collections_abc.py#l422"}}{\fldrslt https://hg.python.org/cpython/file/3.4/Lib/_collections_abc.py#l422}}\'a3\'a9\
\
TransformDict \'b5\'c4\'cd\'a8\'d3\'c3\'d0\'d4\'b8\'fc\'c7\'bf\'a3\'ac \'d2\'b2\'b8\'fc\'b8\'b4\'d4\'d3\'a3\'ac \'d2\'f2\'ce\'aa\'cb\'fc\'b0\'d1\'bc\'fc\'b4\'e6\'b3\'c9\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'cd\'ac\'ca\'b1\'a3\'ac \'bb\'b9\'d2\'aa\'b0\'b4\'d5\'d5\'cb\'fc\'d4\'ad\'c0\'b4\'b5\'c4\'d1\'f9\'d7\'d3\'b4\'e6\'d2\'bb\'b7\'dd\'a1\'a3\
\
3.7 \'b2\'bb\'bf\'c9\'b1\'e4\'d3\'b3\'c9\'e4\'c0\'e0\'d0\'cd\
\'b1\'ea\'d7\'bc\'bf\'e2\'c0\'ef\'cb\'f9\'d3\'d0\'b5\'c4\'d3\'b3\'c9\'e4\'c0\'e0\'d0\'cd\'b6\'bc\'ca\'c7\'bf\'c9\'b1\'e4\'b5\'c4\
\
\'b4\'d3 Python 3.3 \'bf\'aa\'ca\'bc, types \'c4\'a3\'bf\'e9\'d6\'d0\'d2\'fd\'c8\'eb\'c1\'cb\'d2\'bb\'b8\'f6\'b7\'e2\'d7\'b0\'c0\'e0\'c3\'fb\'bd\'d0MappingProxyType\'a1\'a3 \'c8\'e7\'b9\'fb\'b8\'f8\'d5\'e2\'b8\'f6\'c0\'e0\'d2\'bb\'b8\'f6\'d3\'b3\'c9\'e4\'a3\'ac \'cb\'fc\'bb\'e1\'b7\'b5\'bb\'d8\'d2\'bb\'b8\'f6\'d6\'bb\'b6\'c1\'b5\'c4\'d3\'b3\'c9\'e4\'ca\'d3\'cd\'bc\'a1\'a3 \
>>> from types import MappingProxyType\
>>> d = \{1:'A'\}\
>>> d_proxy = MappingProxyType(d)\
>>> d_proxy\
mappingproxy(\{1: 'A'\})\
>>> d_proxy[1] \uc0\u10122 \
'A'\
>>> d_proxy[2] = 'x' \uc0\u10123 \
Traceback (most recent call last):\
File "<stdin>", line 1, in <module>\
TypeError: 'mappingproxy' object does not support item assignment\
>>> d[2] = 'B'\
>>> d_proxy \uc0\u10124 \
mappingproxy(\{1: 'A', 2: 'B'\})\
>>> d_proxy[2]\
'B'\
\uc0\u10124  d_proxy \'ca\'c7\'b6\'af\'cc\'ac\'b5\'c4\'a3\'ac \'d2\'b2\'be\'cd\'ca\'c7\'cb\'b5\'b6\'d4 d \'cb\'f9\'d7\'f6\'b5\'c4\'c8\'ce\'ba\'ce\'b8\'c4\'b6\'af\'b6\'bc\'bb\'e1\'b7\'b4\'c0\'a1\'b5\'bd\'cb\'fc\'c9\'cf\'c3\'e6\'a1\'a3\
\
\
3.8 \'bc\'af\'ba\'cf\'c2\'db\
\'bc\'af\'ba\'cf\'b5\'c4\'b1\'be\'d6\'ca\'ca\'c7\'d0\'ed\'b6\'e0\'ce\'a8\'d2\'bb\'b6\'d4\'cf\'f3\'b5\'c4\'be\'db\'bc\'af\
>>> l = ['spam', 'spam', 'eggs', 'spam']\
>>> set(l)\
\{'eggs', 'spam'\}\
>>> list(set(l))\
['eggs', 'spam']\
\
\'bc\'af\'ba\'cf\'d6\'d0\'b5\'c4\'d4\'aa\'cb\'d8\'b1\'d8\'d0\'eb\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\'a3\'ac set \'c0\'e0\'d0\'cd\'b1\'be\'c9\'ed\'ca\'c7\'b2\'bb\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\'a3\'ac \'b5\'ab\'ca\'c7\
frozenset \'bf\'c9\'d2\'d4\'a1\'a3 \'d2\'f2\'b4\'cb\'bf\'c9\'d2\'d4\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6\'b0\'fc\'ba\'ac\'b2\'bb\'cd\'ac frozenset \'b5\'c4 set\'a1\'a3\
\
\
\'ca\'be\'c0\'fd 3-10 needles \'b5\'c4\'d4\'aa\'cb\'d8\'d4\'da haystack \'c0\'ef\'b3\'f6\'cf\'d6\'b5\'c4\'b4\'ce\'ca\'fd\'a3\'ac\'c1\'bd\'b8\'f6\'b1\'e4\'c1\'bf\'b6\'bc\'ca\'c7 set \'c0\'e0\'d0\'cd\
found = len(needles & haystack)\
found = len(set(needles) & set(haystack))\
# \'c1\'ed\'d2\'bb\'d6\'d6\'d0\'b4\'b7\'a8\'a3\'ba\
found = len(set(needles).intersection(haystack))\
\
3.8.1 \'bc\'af\'ba\'cf\'d7\'d6\'c3\'e6\'c1\'bf\
\'c8\'e7\'b9\'fb\'ca\'c7\'bf\'d5\'bc\'af\'a3\'ac \'c4\'c7\'c3\'b4\'b1\'d8\'d0\'eb\'d0\'b4\'b3\'c9 set() \'b5\'c4\'d0\'ce\'ca\'bd\'a1\'a3\'bc\'af\'ba\'cf\'b5\'c4\'d7\'d6\'c3\'e6\'c1\'bf\'a1\'aa\'a1\'aa\{1\}\'a1\'a2 \{1, 2\}\
\'c8\'e7\'b9\'fb\'d6\'bb\'ca\'c7\'d0\'b4\'b3\'c9 \{\} \'b5\'c4\'d0\'ce\'ca\'bd\'a3\'ac \'b8\'fa\'d2\'d4\'c7\'b0\'d2\'bb\'d1\'f9\'a3\'ac \'c4\'e3\'b4\'b4\'bd\'a8\'b5\'c4\'c6\'e4\'ca\'b5\'ca\'c7\'b8\'f6\'bf\'d5\'d7\'d6\'b5\'e4\'a1\'a3\
>>> s = \{1\}\
>>> type(s)\
<class 'set'>\
>>> s\
\{1\}\
>>> s.pop()\
1>\
>> s\
set()\
\
\
\'d3\'c3 dis.dis\'a3\'a8 \'b7\'b4\'bb\'e3\'b1\'e0\'ba\'af\'ca\'fd\'a3\'a9 \'c0\'b4\'bf\'b4\'bf\'b4\'c1\'bd\'b8\'f6\'b7\'bd\'b7\'a8\'b5\'c4\'d7\'d6\'bd\'da\'c2\'eb\'b5\'c4\'b2\'bb\'cd\'ac\'a3\'ba\
>>> from dis import dis\
>>> dis('\{1\}')\
  1           0 LOAD_CONST               0 (1)\
              2 BUILD_SET                1\
              4 RETURN_VALUE\
>>> dis('set([1])')\
  1           0 LOAD_NAME                0 (set)\
              2 LOAD_CONST               0 (1)\
              4 BUILD_LIST               1\
              6 CALL_FUNCTION            1\
              8 RETURN_VALUE\
\'d3\'c9\'d3\'da Python \'c0\'ef\'c3\'bb\'d3\'d0\'d5\'eb\'b6\'d4 frozenset \'b5\'c4\'cc\'d8\'ca\'e2\'d7\'d6\'c3\'e6\'c1\'bf\'be\'e4\'b7\'a8\'a3\'ac \'ce\'d2\'c3\'c7\'d6\'bb\'c4\'dc\'b2\'c9\'d3\'c3\'b9\'b9\'d4\'ec\'b7\'bd\'b7\'a8\'a1\'a3 \
>>> frozenset(range(10))\
frozenset(\{0, 1, 2, 3, 4, 5, 6, 7, 8, 9\})\
\
3.8.2 \'bc\'af\'ba\'cf\'cd\'c6\'b5\'bc\
\
\'ca\'be\'c0\'fd 3-13 \'d0\'c2\'bd\'a8\'d2\'bb\'b8\'f6 Latin-1 \'d7\'d6\'b7\'fb\'bc\'af\'ba\'cf\'a3\'ac \'b8\'c3\'bc\'af\'ba\'cf\'c0\'ef\'b5\'c4\'c3\'bf\'b8\'f6\'d7\'d6\'b7\'fb\'b5\'c4Unicode \'c3\'fb\'d7\'d6\'c0\'ef\'b6\'bc\'d3\'d0\'a1\'b0SIGN\'a1\'b1\'d5\'e2\'b8\'f6\'b5\'a5\'b4\'ca\
>>> from unicodedata import name \
>>> \{chr(i) for i in range(32, 256) if 'SIGN' in name(chr(i),'')\} \
\{'\'a1\'ea', '+', '#', '\'a3\'a4', '\'a9\'56', '\uc0\u174 ', '\'a1\'e8', '$', '%', '\'a1\'e9', '\'a1\'e3', '\u182 ', '<', '\'a1\'ec', '\'a1\'c1', '\'a1\'c0', '\u169 ', '=', '\'a1\'c2', '\'a6\'cc', '>'\}\
\
3.8.3 \'bc\'af\'ba\'cf\'b5\'c4\'b2\'d9\'d7\'f7\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 3.tiff \width13040 \height7080
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
P161\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 4.tiff \width12400 \height11880
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
\
\'b1\'ed 3-3 \'c0\'ef\'c1\'d0\'b3\'f6\'c1\'cb\'b7\'b5\'bb\'d8\'d6\'b5\'ca\'c7 True \'ba\'cd False \'b5\'c4\'b7\'bd\'b7\'a8\'ba\'cd\'d4\'cb\'cb\'e3\'b7\'fb\'a1\'a3\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 5.tiff \width12240 \height7840
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 7.tiff \width12300 \height12220
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
\
3.9 dict\'ba\'cdset\'b5\'c4\'b1\'b3\'ba\'f3\
\
3.9.1 \'d2\'bb\'b8\'f6\'b9\'d8\'d3\'da\'d0\'a7\'c2\'ca\'b5\'c4\'ca\'b5\'d1\'e9\
\
3.9.2 \'d7\'d6\'b5\'e4\'d6\'d0\'b5\'c4\'c9\'a2\'c1\'d0\'b1\'ed\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://hg.python.org/cpython/file/tip/Objects/dictobject.c"}}{\fldrslt \cf2 http://hg.python.org/cpython/file/tip/Objects/dictobject.c}}\
\'c9\'a2\'c1\'d0\'b1\'ed\'c6\'e4\'ca\'b5\'ca\'c7\'d2\'bb\'b8\'f6\'cf\'a1\'ca\'e8\'ca\'fd\'d7\'e9\'a3\'a8 \'d7\'dc\'ca\'c7\'d3\'d0\'bf\'d5\'b0\'d7\'d4\'aa\'cb\'d8\'b5\'c4\'ca\'fd\'d7\'e9\'b3\'c6\'ce\'aa\'cf\'a1\'ca\'e8\'ca\'fd\'d7\'e9\'a3\'a9 \'a1\'a3\
\
01. \'c9\'a2\'c1\'d0\'d6\'b5\'ba\'cd\'cf\'e0\'b5\'c8\'d0\'d4\
02. \'c9\'a2\'c1\'d0\'b1\'ed\'cb\'e3\'b7\'a8\
\'ce\'aa\'c1\'cb\'bb\'f1\'c8\'a1 my_dict[search_key] \'b1\'b3\'ba\'f3\'b5\'c4\'d6\'b5\'a3\'ac Python \'ca\'d7\'cf\'c8\'bb\'e1\'b5\'f7\'d3\'c3hash(search_key) \'c0\'b4\'bc\'c6\'cb\'e3 search_key \'b5\'c4\'c9\'a2\'c1\'d0\'d6\'b5\'a3\'ac \'b0\'d1\'d5\'e2\'b8\'f6\'d6\'b5\'d7\'ee\'b5\'cd\'b5\'c4\'bc\'b8\'ce\'bb\'ca\'fd\'d7\'d6\'b5\'b1\'d7\'f7\'c6\'ab\'d2\'c6\'c1\'bf\'a3\'ac \'d4\'da\'c9\'a2\'c1\'d0\'b1\'ed\'c0\'ef\'b2\'e9\'d5\'d2\'b1\'ed\'d4\'aa\'a3\'a8 \'be\'df\'cc\'e5\'c8\'a1\'bc\'b8\'ce\'bb\'a3\'ac \'b5\'c3\'bf\'b4\
\'b5\'b1\'c7\'b0\'c9\'a2\'c1\'d0\'b1\'ed\'b5\'c4\'b4\'f3\'d0\'a1\'a3\'a9 \'a1\'a3\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 8.tiff \width12580 \height8200
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
\
3.9.3 dict\'b5\'c4\'ca\'b5\'cf\'d6\'bc\'b0\'c6\'e4\'b5\'bc\'d6\'c2\'b5\'c4\'bd\'e1\'b9\'fb\
01. \'bc\'fc\'b1\'d8\'d0\'eb\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\
\'d2\'bb\'b8\'f6\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\'b6\'d4\'cf\'f3\'b1\'d8\'d0\'eb\'c2\'fa\'d7\'e3\'d2\'d4\'cf\'c2\'d2\'aa\'c7\'f3\'a1\'a3\
(1) \'d6\'a7\'b3\'d6 hash() \'ba\'af\'ca\'fd\'a3\'ac \'b2\'a2\'c7\'d2\'cd\'a8\'b9\'fd __hash__() \'b7\'bd\'b7\'a8\'cb\'f9\'b5\'c3\'b5\'bd\'b5\'c4\'c9\'a2\'c1\'d0\
\'d6\'b5\'ca\'c7\'b2\'bb\'b1\'e4\'b5\'c4\'a1\'a3\
(2) \'d6\'a7\'b3\'d6\'cd\'a8\'b9\'fd __eq__() \'b7\'bd\'b7\'a8\'c0\'b4\'bc\'ec\'b2\'e2\'cf\'e0\'b5\'c8\'d0\'d4\'a1\'a3\
(3) \'c8\'f4 a == b \'ce\'aa\'d5\'e6\'a3\'ac \'d4\'f2 hash(a) == hash(b) \'d2\'b2\'ce\'aa\'d5\'e6\'a1\'a3\
\
\'cb\'f9\'d3\'d0\'d3\'c9\'d3\'c3\'bb\'a7\'d7\'d4\'b6\'a8\'d2\'e5\'b5\'c4\'b6\'d4\'cf\'f3\'c4\'ac\'c8\'cf\'b6\'bc\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\'a3\'ac \'d2\'f2\'ce\'aa\'cb\'fc\'c3\'c7\'b5\'c4\'c9\'a2\'c1\'d0\'d6\'b5\'d3\'c9id() \'c0\'b4\'bb\'f1\'c8\'a1\'a3\'ac \'b6\'f8\'c7\'d2\'cb\'fc\'c3\'c7\'b6\'bc\'ca\'c7\'b2\'bb\'cf\'e0\'b5\'c8\'b5\'c4\'a1\'a3\
02. \'d7\'d6\'b5\'e4\'d4\'da\'c4\'da\'b4\'e6\'c9\'cf\'b5\'c4\'bf\'aa\'cf\'fa\'be\'de\'b4\'f3\
\'c8\'e7\'b9\'fb\'c4\'e3\'d0\'e8\'d2\'aa\'b4\'e6\'b7\'c5\'ca\'fd\'c1\'bf\'be\'de\'b4\'f3\'b5\'c4\'bc\'c7\'c2\'bc\'a3\'ac \'c4\'c7\'c3\'b4\'b7\'c5\'d4\'da\'d3\'c9\'d4\'aa\'d7\'e9\'bb\'f2\'ca\'c7\'be\'df\'c3\'fb\'d4\'aa\'d7\'e9\'b9\'b9\'b3\'c9\'b5\'c4\'c1\'d0\'b1\'ed\'d6\'d0\'bb\'e1\'ca\'c7\'b1\'c8\'bd\'cf\'ba\'c3\'b5\'c4\'d1\'a1\'d4\'f1\
03. \'bc\'fc\'b2\'e9\'d1\'af\'ba\'dc\'bf\'ec\
04. \'bc\'fc\'b5\'c4\'b4\'ce\'d0\'f2\'c8\'a1\'be\'f6\'d3\'da\'cc\'ed\'bc\'d3\'cb\'b3\'d0\'f2\
# \'ca\'c0\'bd\'e7\'c8\'cb\'bf\'da\'ca\'fd\'c1\'bf\'c7\'b010\'ce\'bb\'b9\'fa\'bc\'d2\'b5\'c4\'b5\'e7\'bb\'b0\'c7\'f8\'ba\'c5\
DIAL_CODES = [\
(86, 'China'),\
(91, 'India'),\
(1, 'United States'),\
(62, 'Indonesia'),\
(55, 'Brazil'),\
(92, 'Pakistan'),\
(880, 'Bangladesh'),\
(234, 'Nigeria'),\
(7, 'Russia'),\
(81, 'Japan'),\
]\
d1 = dict(DIAL_CODES) \uc0\u10122 \
print('d1:', d1.keys())\
d2 = dict(sorted(DIAL_CODES)) \uc0\u10123 \
print('d2:', d2.keys())\
d3 = dict(sorted(DIAL_CODES, key=lambda x:x[1])) \uc0\u10124 \
print('d3:', d3.keys())\
assert d1 == d2 and d2 == d3 \uc0\u10125 \
\
\uc0\u10122  \'b4\'b4\'bd\'a8 d1 \'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac \'ca\'fd\'be\'dd\'d4\'aa\'d7\'e9\'b5\'c4\'cb\'b3\'d0\'f2\'ca\'c7\'b0\'b4\'d5\'d5\'b9\'fa\'bc\'d2\'b5\'c4\'c8\'cb\'bf\'da\'c5\'c5\'c3\'fb\'c0\'b4\'be\'f6\'b6\'a8\'b5\'c4\'a1\'a3\
\uc0\u10123  \'b4\'b4\'bd\'a8 d2 \'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac \'ca\'fd\'be\'dd\'d4\'aa\'d7\'e9\'b5\'c4\'cb\'b3\'d0\'f2\'ca\'c7\'b0\'b4\'d5\'d5\'b9\'fa\'bc\'d2\'b5\'c4\'b5\'e7\'bb\'b0\'c7\'f8\'ba\'c5\'c0\'b4\'be\'f6\'b6\'a8\'b5\'c4\'a1\'a3\
\uc0\u10124  \'b4\'b4\'bd\'a8 d3 \'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac \'ca\'fd\'be\'dd\'d4\'aa\'d7\'e9\'b5\'c4\'cb\'b3\'d0\'f2\'ca\'c7\'b0\'b4\'d5\'d5\'b9\'fa\'bc\'d2\'c3\'fb\'d7\'d6\'b5\'c4\'d3\'a2\'ce\'c4\'c6\'b4\'d0\'b4\'c0\'b4\'be\'f6\'b6\'a8\'b5\'c4\'a1\'a3\
\
05. \'cd\'f9\'d7\'d6\'b5\'e4\'c0\'ef\'cc\'ed\'bc\'d3\'d0\'c2\'bc\'fc\'bf\'c9\'c4\'dc\'bb\'e1\'b8\'c4\'b1\'e4\'d2\'d1\'d3\'d0\'bc\'fc\'b5\'c4\'cb\'b3\'d0\'f2\
\
3.9.4 set\'b5\'c4\'ca\'b5\'cf\'d6\'d2\'d4\'bc\'b0\'b5\'bc\'d6\'c2\'b5\'c4\'bd\'e1\'b9\'fb\
set \'ba\'cd frozenset \'b5\'c4\'ca\'b5\'cf\'d6\'d2\'b2\'d2\'c0\'c0\'b5\'c9\'a2\'c1\'d0\'b1\'ed\'a3\'ac \'b5\'ab\'d4\'da\'cb\'fc\'c3\'c7\'b5\'c4\'c9\'a2\'c1\'d0\'b1\'ed\'c0\'ef\'b4\'e6\'b7\'c5\'b5\'c4\'d6\'bb\'d3\'d0\'d4\'aa\'cb\'d8\'b5\'c4\'d2\'fd\'d3\'c3\
\
\'bc\'af\'ba\'cf\'c0\'ef\'b5\'c4\'d4\'aa\'cb\'d8\'b1\'d8\'d0\'eb\'ca\'c7\'bf\'c9\'c9\'a2\'c1\'d0\'b5\'c4\'a1\'a3\
\'bc\'af\'ba\'cf\'ba\'dc\'cf\'fb\'ba\'c4\'c4\'da\'b4\'e6\'a1\'a3\
\'bf\'c9\'d2\'d4\'ba\'dc\'b8\'df\'d0\'a7\'b5\'d8\'c5\'d0\'b6\'cf\'d4\'aa\'cb\'d8\'ca\'c7\'b7\'f1\'b4\'e6\'d4\'da\'d3\'da\'c4\'b3\'b8\'f6\'bc\'af\'ba\'cf\'a1\'a3\
\'d4\'aa\'cb\'d8\'b5\'c4\'b4\'ce\'d0\'f2\'c8\'a1\'be\'f6\'d3\'da\'b1\'bb\'cc\'ed\'bc\'d3\'b5\'bd\'bc\'af\'ba\'cf\'c0\'ef\'b5\'c4\'b4\'ce\'d0\'f2\'a1\'a3\
\'cd\'f9\'bc\'af\'ba\'cf\'c0\'ef\'cc\'ed\'bc\'d3\'d4\'aa\'cb\'d8\'a3\'ac \'bf\'c9\'c4\'dc\'bb\'e1\'b8\'c4\'b1\'e4\'bc\'af\'ba\'cf\'c0\'ef\'d2\'d1\'d3\'d0\'d4\'aa\'cb\'d8\'b5\'c4\'b4\'ce\'d0\'f2\'a1\'a3\
\
3.11 \'d1\'d3\'c9\'ec\'d4\'c4\'b6\'c1\
\'a3\'a8 {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/collections.html"}}{\fldrslt https://docs.python.org/3/library/collections.html}}\'a3\'a9 \'cc\'e1\'b5\'bd\'c1\'cb\'b9\'d8\'d3\'da\'d2\'bb\'d0\'a9\'d3\'b3\'c9\'e4\
\'c0\'e0\'d0\'cd\'b5\'c4\'c0\'fd\'d7\'d3\'ba\'cd\'ca\'b9\'d3\'c3\'bc\'bc\'c7\'c9\'a1\'a3 \'c8\'e7\'b9\'fb\'cf\'eb\'d2\'aa\'b4\'b4\'bd\'a8\'d0\'c2\'b5\'c4\'d3\'b3\'c9\'e4\'c0\'e0\'d0\'cd\'a3\'ac \'bb\'f2\'d5\'df\'ca\'c7\'cc\'e5\'bb\'e1\'d2\'bb\'cf\'c2\
\'cf\'d6\'d3\'d0\'b5\'c4\'d3\'b3\'c9\'e4\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'b5\'cf\'d6\'b7\'bd\'ca\'bd\'a3\'ac Python \'c4\'a3\'bf\'e9 Lib/collections/__init__.py\
\'b5\'c4\'d4\'b4\'c2\'eb\'ca\'c7\'d2\'bb\'b8\'f6\'ba\'dc\'ba\'c3\'b5\'c4\'b2\'ce\'bf\'bc\'a1\'a3\
\
\'a1\'b6 Python Cookbook\'a3\'a8 \'b5\'da 3 \'b0\'e6\'a3\'a9 \'d6\'d0\'ce\'c4\'b0\'e6\'a1\'b7 \'b5\'da 1 \'d5\'c2\'d6\'d0\'d3\'d0 20 \'b8\'f6\'b9\'d8\'d3\'da\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9\'b5\'c4\'ca\'b9\'d3\'c3\'bc\'bc\'c7\'c9\
{\field{\*\fldinst{HYPERLINK "http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html"}}{\fldrslt http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html}}\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}